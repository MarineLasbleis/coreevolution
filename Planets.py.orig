<<<<<<< HEAD
import numpy as np
import matplotlib.pyplot as plt
from scipy.special import erf
import scipy.integrate as integrate
import yaml
import pandas as pd
import sys
from scipy.optimize import minimize_scalar

year = 365.25*3600*24 #s
GC = 6.67e-11  

# Define class for test case
class Rocky_Planet():
    """ Rocky planet, defines physical parameters and evolution """

    def __init__(self):
        self.parameters()

    def parameters(self):
        pass 

    def A_rho(self):
        return (5. * self.Kprime_0 - 13.) / 10.

    def read_parameters(self, file):
        with open(file, 'r') as stream:
            try:
                dict_param = yaml.safe_load(stream)
            except yaml.YAMLError as exc:
                print(exc)
        for k, v in dict_param.items():
            setattr(self, k, float(v))


class Evolution():
    """ Calculate the thermal evolution a given planet """

    def __init__(self, planet):
        self.planet = planet
        self.r_IC = np.zeros_like(self.planet.time_vector)
        self.drIC_dt = np.zeros_like(self.planet.time_vector)
        self.T = np.zeros_like(self.planet.time_vector)
        self.dT_dt = np.zeros_like(self.planet.time_vector)
        self.PC = np.zeros_like(self.planet.time_vector)
        self.PL = np.zeros_like(self.planet.time_vector)
        self.PX = np.zeros_like(self.planet.time_vector)
        self.Q_CMB = np.zeros_like(self.planet.time_vector)
        self.T_CMB = np.zeros_like(self.planet.time_vector)
        self.Delta_time = self.planet.time_vector.diff()*year        
        
        if self.planet.r_IC_0 == 0.0:
            
            self.T[0] = self.planet.T0
            
        else:
            
            self.T[0] = self.T_melt(self.planet.r_IC_0)
        
        self.r_IC[0] = self.planet.r_IC_0
        self.PC[0] = self._PC(self.r_IC[0])
        self.PL[0] = self._PL(self.r_IC[0])
        self.PX[0] = self._PX(self.r_IC[0])
        self.Q_CMB[0] = 0.
        self.T_CMB[0] = self.T_adiabat(self.planet.r_OC,self.T[0])
                          
    # Run evolution model          
    def run(self):
        for i,time in enumerate(self.planet.time_vector[1:]):
            
            if self.r_IC[i] == 0.0 and self.T[i] > self.planet.TL0:
                              
                T, dT_dt,r_IC, drIC_dt, PC, PL, PX, Q_CMB, T_CMB =  self.update_noic(self.T[i],self.Delta_time[i+1],self.planet.qcmb[i])
                self.T[i+1] = T 
                self.dT_dt[i+1] = dT_dt
                self.r_IC[i+1] = r_IC
                self.drIC_dt[i+1] = drIC_dt
                self.PC[i+1] = PC
                self.PL[i+1] = PL
                self.PX[i+1] = PX
                self.Q_CMB[i+1] = Q_CMB
                self.T_CMB[i+1] = T_CMB
                #print i#, T, dT_dt, PC, drIC_dt,r_IC#, PC, PL, PX
                print i, T, T_CMB
                
                if self.T[i+1] < self.planet.TL0:

                    self.r_IC[i+1] = self.find_r_IC(T)
                
            else:                 
               
                T, r_IC, drIC_dt, PC, PL, PX, Q_CMB, T_CMB =  self.update_ic(self.r_IC[i], self.Delta_time[i+1],self.planet.qcmb[i])
                self.T[i+1] = T
                self.r_IC[i+1] = r_IC
                self.drIC_dt[i+1] = drIC_dt
                self.PC[i+1] = PC
                self.PL[i+1] = PL
                self.PX[i+1] = PX
                self.Q_CMB[i+1] = Q_CMB
                self.T_CMB[i+1] = T_CMB
                        
        plt.plot(self.planet.time_vector,self.T,'+')
        plt.xlabel('Time (years)')
        plt.ylabel('Temperature at the center (K)')
        plt.gca().set_xlim(left=0)        
        plt.show()
        
        plt.plot(self.planet.time_vector,self.r_IC/1e3,'+')
        plt.xlabel('Time (years)')
        plt.ylabel('Inner core radius (km)')
        plt.gca().set_xlim(left=0) 
        plt.show()
        
        plt.plot(self.planet.time_vector,self.PC, label='Secular cooling')
        plt.plot(self.planet.time_vector,self.PL,label='Latent heat')
        plt.plot(self.planet.time_vector,self.PX, label='Gravitational heat')
        plt.xlabel('Time (years)')
        plt.ylabel('Powers (W)')
        plt.gca().set_xlim(left=0) 
        plt.legend()
        plt.show()
        #print self.Delta_time, self.T[0], self.T[-1]
        #print self.T[-1], self.planet.TL0
        
        plt.plot(self.planet.time_vector,self.Q_CMB,'+')
        plt.xlabel('Time (years)')
        plt.ylabel('CMB heat flow (W)')
        plt.gca().set_xlim(left=0)        
        plt.show()
        
        plt.plot(self.planet.time_vector,self.T_CMB,'+')
        plt.xlabel('Time (years)')
        plt.ylabel('CMB temperature (K)')
        plt.gca().set_xlim(left=0)        
        plt.show()
        
        
    def dTL_dr_IC(self, r):
        ''' Melting temperature jump at ICB (to be modified) '''
        return -self.planet.K_c * 2.*self.planet.dTL_dP * r / self.planet.L_rho**2. \
            + 3. * self.planet.dTL_dchi * self.planet.chi0 * r**2. / (self.planet.L_rho**3. * self.fC(self.planet.r_OC / self.planet.L_rho, 0.))

    def fC(self, r, delta): 
        '''fC (Eq. A1 Labrosse 2015)'''
        return r**3. * (1 - 3. / 5. * (delta + 1) * r**2.- 3. / 14. * (delta + 1) \
            * (2 * self.planet.A_rho - delta) * r**4.)

    def fX(self, r, r_IC):
        '''fX (Eq. A15 Labrosse 2015)'''
        return (r)**3. * (-r_IC**2. / 3. / self.planet.L_rho**2. + 1./5. * (1.+r_IC**2./self.planet.L_rho**2.) \
                *(r)**2.-13./70. * (r)**4.) 

    def rho(self, r):
        ''' Density (Eq. 5 Labrosse 2015)'''
        return self.planet.rho_c * (1. - r**2. / self.planet.L_rho**2. - self.planet.A_rho * r**4. / self.planet.L_rho**4.)

    def T_melt(self, r):
        ''' Melting temperature at ICB (Eq. 14 Labrosse 2015)'''
        return self.planet.TL0 - self.planet.K_c * self.planet.dTL_dP * r**2. / self.planet.L_rho**2. + self.planet.dTL_dchi * self.planet.chi0 * r**3. \
                / (self.planet.L_rho**3. * self.fC(self.planet.r_OC / self.planet.L_rho, 0.))

    def _PL(self, r):
        '''Latent heat power'''
        return 4. * np.pi * r**2. * self.T_melt(r) * self.rho(r) * self.planet.DeltaS


    def _PC(self, r):
        '''Secular cooling power (Eq. A8 Labrosse 2015)'''
        return -4. * np.pi / 3. * self.planet.rho_c * self.planet.CP * self.planet.L_rho**3. *\
                (1 - r**2. / self.planet.L_rho**2 - self.planet.A_rho* r**4. / self.planet.L_rho**4.)**(-self.planet.gamma) \
                * (self.dTL_dr_IC(r) + 2. * self.planet.gamma \
                * self.T_melt(r) * r / self.planet.L_rho**2. *(1 + 2. * self.planet.A_rho * r**2. / self.planet.L_rho**2.) \
                /(1 - r**2. / self.planet.L_rho**2. - self.planet.A_rho * r**4. / self.planet.L_rho**4.)) \
                * (self.fC(self.planet.r_OC / self.planet.L_rho, self.planet.gamma))


    def _PX(self, r):
        ''' Gravitational heat power (Eq. A14 Labrosse 2015)'''
        return 8 * np.pi**2 * self.planet.chi0 * GC * self.planet.rho_c**2 * self.planet.beta * r**2. \
        * self.planet.L_rho**2. / self.fC(self.planet.r_OC / self.planet.L_rho, 0) \
        * (self.fX(self.planet.r_OC / self.planet.L_rho, r) - self.fX(r / self.planet.L_rho, r))

    def pressure_diff(self,r):  #in GPa
        K0 = self.planet.L_rho**2/3.*2.*np.pi*GC*self.planet.rho_c**2 /1e9 #in GPa
        parenthesis = r**2/self.planet.L_rho**2-4./5.*r**4/self.planet.L_rho**4
        return -K0*parenthesis
    
    def T_adiabat(self,r,T):
        return T*(1-r**2/self.planet.L_rho**2-self.planet.A_rho*r**4/self.planet.L_rho**4)**self.planet.gamma
    
    def update_noic(self,T,Delta_time,qcmb):
        
        fC = self.fC(self.planet.r_OC / self.planet.L_rho, self.planet.gamma)
        
        ''' Secular cooling power '''
        PC = (-4*np.pi/3*self.planet.rho_c*self.planet.CP*self.planet.L_rho**3*fC)
        
        ''' Latent heat power '''
        PL = 0.

        ''' Gravitational heat power '''
        PX = 0.      
        
        Q_CMB = 4*np.pi*self.planet.r_OC**2*qcmb
        
        '''Temperature increase at center'''
        dT_dt = Q_CMB/PC  
        
        ''' New central temperature '''
        T = T + dT_dt * Delta_time  
        
        ''' Inner core growth '''
        drIC_dt = 0.
        
        ''' Inner core size '''
        r_IC = 0.
        
        '''Temperature CMB'''
        T_CMB = self.T_adiabat(self.planet.r_OC,T)
        
        return T, dT_dt,r_IC, drIC_dt, PC, PL, PX, Q_CMB, T_CMB
        
    def update_ic(self, r_IC, Delta_time,qcmb):
        
        PC = self._PC(r_IC)
        
        PL = self._PL(r_IC)
        
        PX = self._PX(r_IC)
        
        Q_CMB = 4*np.pi*self.planet.r_OC**2*qcmb

        drIC_dt = Q_CMB/(PC + PL + PX)
        
        r_IC = r_IC + drIC_dt * Delta_time
       
        T = self.T_melt(r_IC)
        
        T_CMB = self.T_adiabat(self.planet.r_OC,T)
        
        return T,r_IC, drIC_dt, PC, PL, PX, Q_CMB, T_CMB
    
    def find_r_IC(self, T0):
        
        
        def Delta_T(radius):
            #P = self.pressure_diff(radius, rho_0, Lrho, Arho)+P0
            Ta = self.T_adiabat(radius,T0)
            TL = self.T_melt(radius)
            return (Ta - TL)**2
        res = minimize_scalar(Delta_T, bounds=(0., 6e6), method='bounded') #, constraints={'type':'ineq', 'fun': lambda x: x})  #result has to be >0
        r_IC = res.x
        if r_IC < 1: r_IC = np.array(0.)
        return r_IC.tolist()
        
        

     
#        ## ENERGIES
#        ''' Latent heat '''
#        self.L = 4. * np.pi / 3. * self.planet.rho_c * self.planet.TL0 * self.planet.DeltaS * self.planet.r_IC**3. * (1 - 3. / 5. \
#            * (1 + self.planet.K_c / self.planet.TL0 * self.planet.dTL_dP) * self.planet.r_IC**2. / self.planet.L_rho**2. \
#            + self.planet.chi0 / (2 * self.fC(self.planet.r_OC / self.planet.L_rho, 0.) * self.planet.TL0) * self.planet.dTL_dchi * self.planet.r_IC**3. / self.planet.L_rho**3.)
#        print("Latent heat", self.L,"J")
#        
#        ''' Secular cooling '''
#        self.C = 4. * np.pi / 3. * self.planet.rho_c * self.planet.CP * self.planet.L_rho * self.planet.r_IC**2 * self.fC(self.planet.r_OC / self.planet.L_rho, self.planet.gamma)\
#                * (self.planet.dTL_dP * self.planet.K_c - self.planet.gamma * self.planet.TL0 - self.planet.dTL_dchi * self.planet.chi0 / self.fC(self.planet.r_OC / self.planet.L_rho, 0.) * self.planet.r_IC / self.planet.L_rho)    
#        print("Secular cooling", self.C,"J")
#
#
#        ''' Gravitational energy '''
#        self.G = 8 * np.pi**2. / 15. * self.planet.chi0 * self.planet.GC * self.planet.rho_c**2. * self.planet.beta * self.planet.r_IC**3. * self.planet.r_OC**5. / self.planet.L_rho**3. \
#            / self.fC(self.planet.r_OC/self.planet.L_rho,0)*(1. - self.planet.r_IC**2 / self.planet.r_OC**2 + 3. * self.planet.r_IC**2. / 5. / self.planet.L_rho**2. \
#                - 13. * self.planet.r_OC**2. / 14. / self.planet.L_rho**2. + 5./18. * self.planet.r_IC**3. * self.planet.L_rho**2. /self.planet.r_OC**5.)
#        print("Gravitational energy", self.G,"J")
#
#        ''' Total energy '''
#        self.E_tot = self.L + self.C + self.G
#        print("Total energy", self.E_tot,"J")

# --------------------------------------------------------------------------- #

Mp = 1.2
XFe = 50  #insert 30 for file with no initial core
FeM = 0.00

class Exo(Rocky_Planet):
    
    def parameters(self):
        self.read_parameters("M_ {:.1f}_Fe_{:.0f}.0000_FeM_{:2.0f}.0000.yaml".format(Mp, XFe, FeM))
        qcmb_ev = pd.read_csv("qc_T_M{:02d}_Fe{:02d}_FeM{:02d}.txt".format(int(10*Mp),int(XFe)+5, int(FeM)), sep=" ", skiprows=1, header=None)
        qcmb_ev.columns = ["time", "qcmb", "Tcmb"]
        self.time_vector = qcmb_ev["time"]
        self.qcmb = qcmb_ev["qcmb"]

if __name__ == '__main__': 
       
    Evolution(Exo()).run()   
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

=======
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Thermal evolution of exoplanetary cores\n",
    "\n",
    "This code solves for the thermal evolution of the cores of planets having different mass and iron content. The structural profiles (density, temperature, etc.), initial inner core sizes (if any) of these bodies, along with the CMB heat flux evolution, are obtained from a model developed by Lena Noack. For now, the code solves the energy balance equation as in Labrosse (2015), as well as the magnetic evolution obtained by calculating the thermal and buouancy fluxes and calculating the magnetic moment."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.special import erf\n",
    "import scipy.integrate as integrate\n",
    "import yaml\n",
    "import pandas as pd\n",
    "import sys\n",
    "from scipy.optimize import minimize_scalar\n",
    "import os\n",
    "import glob"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Constants"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "year = 365.25*3600*24         # 1 year (s)\n",
    "GC = 6.67e-11                 # Gravitational constant (m3 kg-1 s-2)\n",
    "Ak = 2.39                     # Radial dependence of conductivity\n",
    "beta = 0.2                    # Saturation constant for fast rotating polar dynamos\n",
    "mu_0 = 4*np.pi*1e-7           # Magnetic permeability (Hm-1)\n",
    "M_Earth = 5.972e24            # Mass of the Earth (kg)\n",
    "#g_c = 5                      # Core gravity (estimated)\n",
    "k_c = 150                     # Core thermal conductivity\n",
    "magn_moment_Earth = 7.8e22    # Magnetic moment Earth (Am2)\n",
    "\n",
    "plots_folder = \"/Users/irenebonati/Desktop/core/Figures/\"   # Folder in which to save plots"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rocky planet class \n",
    "\n",
    "Defines physical parameters of a given planet. Parameters are read from yaml files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Rocky_Planet():\n",
    "\n",
    "    def __init__(self):\n",
    "        self.parameters()\n",
    "\n",
    "#     def parameters(self):\n",
    "#         pass \n",
    "\n",
    "    def read_parameters(self, file): \n",
    "        \"\"\"Read parameters from yaml file\"\"\"\n",
    "        with open(file, 'r') as stream:\n",
    "            try:\n",
    "                dict_param = yaml.safe_load(stream)\n",
    "            except yaml.YAMLError as exc:\n",
    "                print(exc)\n",
    "        for k, v in dict_param.items():\n",
    "            setattr(self, k, float(v))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evolution class\n",
    "\n",
    "Calculates the thermal evolution of a given planet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Evolution():\n",
    "\n",
    "    def __init__(self, planet):\n",
    "        self.planet = planet\n",
    "        \n",
    "        '''Initialize matrices'''\n",
    "        self.r_IC = np.zeros_like(self.planet.time_vector)\n",
    "        self.drIC_dt = np.zeros_like(self.planet.time_vector)\n",
    "        self.T = np.zeros_like(self.planet.time_vector)\n",
    "        self.dT_dt = np.zeros_like(self.planet.time_vector)\n",
    "        self.PC = np.zeros_like(self.planet.time_vector)\n",
    "        self.PL = np.zeros_like(self.planet.time_vector)\n",
    "        self.PX = np.zeros_like(self.planet.time_vector)\n",
    "        self.QC = np.zeros_like(self.planet.time_vector)\n",
    "        self.QL = np.zeros_like(self.planet.time_vector)\n",
    "        self.QX = np.zeros_like(self.planet.time_vector)\n",
    "        self.Q_CMB = np.zeros_like(self.planet.time_vector)\n",
    "        self.T_CMB = np.zeros_like(self.planet.time_vector)\n",
    "        self.SC = np.zeros_like(self.planet.time_vector)\n",
    "        self.TC = np.zeros_like(self.planet.time_vector)\n",
    "        self.SR = np.zeros_like(self.planet.time_vector)\n",
    "        self.TR = np.zeros_like(self.planet.time_vector)\n",
    "        self.Sk = np.zeros_like(self.planet.time_vector)\n",
    "        self.Tphi = np.zeros_like(self.planet.time_vector)\n",
    "        self.phi = np.zeros_like(self.planet.time_vector)\n",
    "        self.qc_ad = np.zeros_like(self.planet.time_vector)\n",
    "        self.F_th = np.zeros_like(self.planet.time_vector) \n",
    "        self.F_X = np.zeros_like(self.planet.time_vector)\n",
    "        self.Bc = np.zeros_like(self.planet.time_vector)\n",
    "        self.Bs = np.zeros_like(self.planet.time_vector)\n",
    "        self.M = np.zeros_like(self.planet.time_vector)\n",
    "        self.g_c = np.zeros_like(self.planet.time_vector)\n",
    "        self.M_ratio = np.zeros_like(self.planet.time_vector)\n",
    "        self.P_IC = np.zeros_like(self.planet.time_vector)\n",
    "        self.Delta_time = self.planet.time_vector.diff()*year\n",
    "                \n",
    "        '''Initial temperature at the center T0'''\n",
    "        '''If no initial inner core, T0 is same as in yaml parameter file'''\n",
    "        '''If initial inner core, define T0 by using the melting temperature'''\n",
    "        if self.planet.r_IC_0 == 0.0:\n",
    "            self.T[0] = self.planet.T0 \n",
    "            self.P_IC[0] = self.planet.P0\n",
    "        else:    \n",
    "            self.P_IC[0] = self.pressure_diff(self.planet.r_IC_0)+self.planet.P0\n",
    "            P_IC = self.P_IC[0]\n",
    "            self.T[0] = self.T_liquidus_core(P_IC, S)\n",
    "            #self.T[0] = self.T_melt(self.planet.r_IC_0)\n",
    "            \n",
    "        '''Initial inner core radius, powers, CMB heat flux (set to 0 for now), CMB temperature'''\n",
    "        self.r_IC[0] = self.planet.r_IC_0\n",
    "        #self.PC[0] = self._PC(self.r_IC[0])\n",
    "        self.Q_CMB[0] = 0\n",
    "        self.T_CMB[0] = self.T_adiabat(self.planet.r_OC,self.T[0])\n",
    "                          \n",
    "    '''Run evolution model'''         \n",
    "    def run(self):\n",
    "        \n",
    "        for i,time in enumerate(self.planet.time_vector[1:]):\n",
    "            \n",
    "            '''No initial inner core --> update_noic routine'''\n",
    "            if self.r_IC[i] == 0.0 and self.T[i] > self.planet.TL0:\n",
    "                              \n",
    "                T, dT_dt,r_IC, drIC_dt, PC, PL, PX, Q_CMB, T_CMB, QC, QL, QX,qc_ad, F_th, F_X, Bc, Bs, M,M_ratio,P_IC =  self.update_noic(self.T[i],self.Delta_time[i+1],self.planet.qcmb[i])\n",
    "                '''Shift updated value to the next time step'''\n",
    "                self.T[i+1] = T \n",
    "                self.dT_dt[i+1] = dT_dt\n",
    "                self.r_IC[i+1] = r_IC\n",
    "                self.drIC_dt[i+1] = drIC_dt\n",
    "                self.PC[i+1] = PC\n",
    "                self.PL[i+1] = PL\n",
    "                self.PX[i+1] = PX\n",
    "                self.Q_CMB[i+1] = Q_CMB\n",
    "                self.T_CMB[i+1] = T_CMB\n",
    "                self.QC[i+1] = QC\n",
    "                self.QL[i+1] = QL\n",
    "                self.QX[i+1] = QX\n",
    "                self.qc_ad[i+1] = qc_ad\n",
    "                self.F_th[i+1] = F_th\n",
    "                self.F_X[i+1] = F_X\n",
    "                self.Bc[i+1] = Bc\n",
    "                self.Bs[i+1] = Bs\n",
    "                self.M[i+1] = M\n",
    "                self.M_ratio[i+1] = M_ratio\n",
    "                self.P_IC[i+1] = P_IC\n",
    "                 \n",
    "                '''For the first step at which an inner core starts forming, look for the inner core radius'''\n",
    "                if self.T[i+1] < self.planet.TL0:\n",
    "                    self.r_IC[i+1] = self.find_r_IC(T) \n",
    "                    r_IC_core0 = self.r_IC[i+1]\n",
    "                    self.P_IC[i+1] = self.pressure_diff(r_IC_core0)+self.planet.P0\n",
    "                    P_IC_core0 = self.P_IC[i+1]\n",
    "                                        \n",
    "            else:                 \n",
    "               \n",
    "                '''Initial inner core --> update_ic routine'''  \n",
    "                T, r_IC, drIC_dt, PC, PL, PX, Q_CMB,T_CMB, QC, QL, QX,qc_ad, F_th, F_X, Bc, Bs, M,M_ratio,P_IC =  self.update_ic(self.r_IC[i], self.Delta_time[i+1],self.planet.qcmb[i],self.P_IC[i],S)\n",
    "                self.T[i+1] = T\n",
    "                self.r_IC[i+1] = r_IC\n",
    "                self.drIC_dt[i+1] = drIC_dt\n",
    "                self.PC[i+1] = PC\n",
    "                self.PL[i+1] = PL\n",
    "                self.PX[i+1] = PX\n",
    "                self.Q_CMB[i+1] = Q_CMB\n",
    "                self.T_CMB[i+1] = T_CMB   \n",
    "                self.QC[i+1] = QC\n",
    "                self.QL[i+1] = QL\n",
    "                self.QX[i+1] = QX\n",
    "                self.qc_ad[i+1] = qc_ad\n",
    "                self.F_th[i+1] = F_th\n",
    "                self.F_X[i+1] = F_X\n",
    "                self.Bc[i+1] = Bc\n",
    "                self.Bs[i+1] = Bs\n",
    "                self.M[i+1] = M\n",
    "                self.M_ratio[i+1] = M_ratio\n",
    "                self.P_IC[i+1] = P_IC\n",
    "                        \n",
    "        for i in range(1,len(self.planet.time_vector)-1):\n",
    "            if self.M[i-1]==0 and self.M[i]!=0:\n",
    "                t_start = self.planet.time_vector[i]\n",
    "            if self.M[i+1]==0 and self.M[i]!=0 and self.M[i-1]!=0:\n",
    "                t_end = self.planet.time_vector[i]\n",
    "                t_mf = t_end - t_start\n",
    "                print (\"The magnetic field lifetime is %.2f billion years.\"%(t_mf*1e-9))       \n",
    "        \n",
    "        '''Figures'''\n",
    "        plt.figure(num=None, figsize=(10, 4), dpi=80, facecolor='w', edgecolor='k')\n",
    "        plt.subplot(1, 2, 1) \n",
    "        plt.plot(self.planet.time_vector,self.T, color='royalblue')\n",
    "        plt.xlabel('Time (years)')\n",
    "        plt.ylabel('Temperature at the center/ICB (K)')\n",
    "        plt.gca().set_xlim(left=self.planet.time_vector[1]) \n",
    "        plt.subplot(1, 2, 2)\n",
    "        plt.plot(self.planet.time_vector,self.r_IC/1e3, color='royalblue')\n",
    "        plt.xlabel('Time (years)')\n",
    "        plt.ylabel('Inner core radius (km)')\n",
    "        plt.suptitle('$M=$ %.1f $M_{\\oplus}$, $C_{\\mathrm{Fe}}=$ %.0f wt %%' %(np.float(Mp),np.float(XFe)))\n",
    "        plt.gca().set_xlim(left=self.planet.time_vector[1])\n",
    "        plt.subplots_adjust(wspace=0.4)\n",
    "        plt.savefig(plots_folder + 'T+r_IC_{}ME_{}XFe_{}FeM.pdf'.format(Mp,XFe,FeM), bbox_inches=\"tight\")\n",
    "        plt.show()\n",
    "\n",
    "        plt.plot(self.planet.time_vector[1:],self.QC[1:], label='Secular cooling',color='cornflowerblue')\n",
    "        plt.plot(self.planet.time_vector[1:],self.QL[1:],label='Latent heat',color='salmon')\n",
    "        plt.plot(self.planet.time_vector[1:],self.QX[1:], label='Gravitational heat',color='yellowgreen')\n",
    "        plt.plot(self.planet.time_vector[1:],self.QL[1:]+self.QC[1:]+self.QX[1:], label='Total',color='mediumpurple')\n",
    "        plt.xlabel('Time (years)')\n",
    "        plt.ylabel('Contributions to energy balance (W)')\n",
    "        plt.title('$M=$ %.1f $M_{\\oplus}$, $C_{\\mathrm{Fe}}=$ %.0f wt %%' %(np.float(Mp),np.float(XFe)))\n",
    "        plt.gca().set_xlim(left=self.planet.time_vector[1])\n",
    "        plt.legend()\n",
    "        plt.savefig(plots_folder + 'Energy_balance_{}ME_{}XFe_{}FeM.pdf'.format(Mp,XFe,FeM), bbox_inches=\"tight\")\n",
    "        plt.show()\n",
    "        \n",
    "        plt.figure(num=None, figsize=(10, 4), dpi=80, facecolor='w', edgecolor='k')\n",
    "        plt.subplot(1, 2, 1)  \n",
    "        plt.plot(self.planet.time_vector,self.Q_CMB,color='royalblue')\n",
    "        plt.xlabel('Time (years)')\n",
    "        plt.ylabel('CMB heat flow (W)')\n",
    "        plt.gca().set_xlim(left=self.planet.time_vector[1])  \n",
    "        plt.subplot(1, 2, 2)         \n",
    "        plt.plot(self.planet.time_vector,self.T_CMB,color='royalblue')\n",
    "        plt.xlabel('Time (years)')\n",
    "        plt.ylabel('CMB temperature (K)')\n",
    "        plt.suptitle('$M=$ %.1f $M_{\\oplus}$, $C_{\\mathrm{Fe}}=$ %.0f wt %%' %(np.float(Mp),np.float(XFe)))\n",
    "        plt.gca().set_xlim(left=self.planet.time_vector[1]) \n",
    "        plt.subplots_adjust(wspace=0.4)\n",
    "        plt.savefig(plots_folder + 'QCMB_TCMB_{}ME_{}XFe_{}FeM.pdf'.format(Mp,XFe,FeM), bbox_inches=\"tight\")\n",
    "        plt.show()\n",
    "        \n",
    "        plt.plot(self.planet.time_vector,self.F_th, label='Temperature',color='tomato')\n",
    "        plt.plot(self.planet.time_vector,self.F_X, label='Composition',color='mediumseagreen')\n",
    "        plt.xlabel('Time (years)')\n",
    "        plt.ylabel('Buoyancy fluxes ($m^{2}s^{-3}$)')\n",
    "        plt.title('$M=$ %.1f $M_{\\oplus}$, $C_{\\mathrm{Fe}}=$ %.0f wt %%' %(np.float(Mp),np.float(XFe)))\n",
    "        plt.gca().set_xlim(left=self.planet.time_vector[1]) \n",
    "        plt.legend()\n",
    "        plt.savefig(plots_folder + 'Fluxes_{}ME_{}XFe_{}FeM.pdf'.format(Mp,XFe,FeM), bbox_inches=\"tight\")\n",
    "        plt.show()\n",
    "        \n",
    "        plt.figure(num=None, figsize=(10, 4), dpi=80, facecolor='w', edgecolor='k')\n",
    "        plt.subplot(1, 2, 1)  \n",
    "        plt.plot(self.planet.time_vector,self.Bc * 1e3,label='CMB',color='tomato')\n",
    "        plt.plot(self.planet.time_vector,self.Bs * 1e3,label='Surface',color='mediumseagreen')\n",
    "        plt.xlabel('Time (years)')\n",
    "        plt.ylabel('rms dipole field (mT)')\n",
    "        plt.semilogy()\n",
    "        plt.gca().set_xlim(left=self.planet.time_vector[1]) \n",
    "        plt.legend()\n",
    "        ax1 = plt.subplot(1, 2, 2) \n",
    "        ax1.plot(self.planet.time_vector,self.M,color='grey')\n",
    "        ax1.set_ylabel('Magnetic moment ($A m^{2}$)')\n",
    "        ax2 = ax1.twinx()  \n",
    "        ax2.set_ylabel('Magnetic moment present Earth ($A m^{2}$)')  \n",
    "        ax2.plot(self.planet.time_vector,self.M_ratio,color='grey')\n",
    "        ax2.tick_params(axis='y')\n",
    "        plt.xlabel('Time (years)')\n",
    "        plt.suptitle('$M=$ %.1f $M_{\\oplus}$, $C_{\\mathrm{Fe}}=$ %.0f wt %%' %(np.float(Mp),np.float(XFe)))\n",
    "        plt.gca().set_xlim(left=self.planet.time_vector[1]) \n",
    "        plt.subplots_adjust(wspace=0.4)\n",
    "        plt.savefig(plots_folder + 'MField_{}ME_{}XFe_{}FeM.pdf'.format(Mp,XFe,FeM), bbox_inches=\"tight\")\n",
    "        plt.show()\n",
    "            \n",
    "    '''Routine for no initial inner core'''\n",
    "    def update_noic(self,T,Delta_time,qcmb):\n",
    "        \n",
    "        fC = self.fC(self.planet.r_OC / self.planet.L_rho, self.planet.gamma)\n",
    "        \n",
    "        ''' Secular cooling power '''\n",
    "        PC = (-4*np.pi/3*self.planet.rho_c*self.planet.CP*self.planet.L_rho**3*fC)\n",
    "        \n",
    "        ''' Latent heat power '''\n",
    "        PL = 0.\n",
    "\n",
    "        ''' Gravitational heat power '''\n",
    "        PX = 0.      \n",
    "        \n",
    "        '''CMB heat flow'''\n",
    "        Q_CMB = 4*np.pi*self.planet.r_OC**2*qcmb\n",
    "\n",
    "        '''Temperature increase at center'''\n",
    "        dT_dt = Q_CMB/PC \n",
    "        \n",
    "        ''' New central temperature '''\n",
    "        T = T + dT_dt * Delta_time \n",
    "                        \n",
    "        ''' Inner core growth '''\n",
    "        drIC_dt = 0.\n",
    "        \n",
    "        ''' Inner core size'''\n",
    "        r_IC = 0.\n",
    "        \n",
    "        P_IC = self.planet.P0\n",
    "                \n",
    "        '''Temperature at CMB'''\n",
    "        T_CMB = self.T_adiabat(self.planet.r_OC,T)\n",
    "        \n",
    "        '''Secular cooling power'''\n",
    "        QC = PC * dT_dt\n",
    "        \n",
    "        ''' Latent heat power '''\n",
    "        QL = 0.\n",
    "\n",
    "        ''' Gravitational heat power '''\n",
    "        QX = 0. \n",
    "        \n",
    "#         '''Entropy contribution of secular cooling'''\n",
    "#         SC = self._SC(r_IC,drIC_dt,P_IC,S)\n",
    "        \n",
    "#         TC = self._TC(r_IC,P_IC,S)\n",
    "        \n",
    "#         '''Entropy contribution of radiocativity (assumed to be 0)'''\n",
    "#         SR = 0.\n",
    "        \n",
    "#         TR = self._TR(r_IC,P_IC,S)\n",
    "        \n",
    "#         '''Entropy contribution of conduction'''\n",
    "#         Sk = self._Sk(r_IC)\n",
    "        \n",
    "#         '''Dissipation temperature'''\n",
    "#         Tphi = self._Tphi(T,r_IC)\n",
    "        \n",
    "#         '''Efficiency factor'''\n",
    "#         phi = self._eff_noic(Tphi,TC,T_CMB,QC,TR,0,Sk)\n",
    "        \n",
    "        '''Isentropic heat flux'''\n",
    "        qc_ad = self._qc_ad(k_c,T_CMB,r_IC)\n",
    "\n",
    "        '''Gravity at CMB'''\n",
    "        g_c = self._gravity_CMB(XFe,FeM,Mp)\n",
    "        \n",
    "        '''Thermal buoyancy'''\n",
    "        F_th = self._F_th(g_c,qcmb,qc_ad)\n",
    "        \n",
    "        '''Compositional buoyancy'''\n",
    "        F_X = self._F_X(g_c,r_IC,drIC_dt)\n",
    "        \n",
    "        R_planet = self._R_planet(XFe,Mp)\n",
    "        rho_OC = self._density(self.planet.r_OC)\n",
    "        \n",
    "        '''rms dipole field @ CMB'''\n",
    "        Bc = self._Bc(rho_OC,F_th,F_X,r_IC)\n",
    "        \n",
    "        '''rms dipole field @ surface'''\n",
    "        Bs = self._Bs (Bc,R_planet)\n",
    "        \n",
    "        '''Magnetic moment (Am2)'''\n",
    "        M = self._magn_moment(rho_OC,F_th,F_X,r_IC)\n",
    "        \n",
    "        M_ratio = M/magn_moment_Earth\n",
    "                \n",
    "        return T, dT_dt,r_IC, drIC_dt, PC, PL, PX, Q_CMB, T_CMB, QC, QL, QX, qc_ad, F_th, F_X, Bc, Bs, M, M_ratio, P_IC\n",
    "    \n",
    "    '''Routine for initial inner core'''    \n",
    "    def update_ic(self, r_IC, Delta_time,qcmb,P_IC,S):\n",
    "        \n",
    "        '''Secular cooling power'''\n",
    "        PC = self._PC(r_IC,P_IC,S)\n",
    "        \n",
    "        '''Latent heat power'''\n",
    "        PL = self._PL(r_IC,P_IC,S)\n",
    "        \n",
    "        '''Gravitational heat power'''\n",
    "        PX = self._PX(r_IC)\n",
    "        \n",
    "        '''CMB heat flow'''\n",
    "        Q_CMB = 4*np.pi*self.planet.r_OC**2*qcmb\n",
    "        \n",
    "        '''Inner core growth rate'''\n",
    "        drIC_dt = Q_CMB/(PC + PL + PX)\n",
    "                        \n",
    "        '''Inner core radius'''\n",
    "        r_IC = r_IC + drIC_dt * Delta_time\n",
    "                                                \n",
    "        P_IC = self.pressure_diff(r_IC) + self.planet.P0\n",
    "                        \n",
    "        '''Temperature at the ICB'''\n",
    "        #T = self.T_melt(r_IC)\n",
    "        T = self.T_liquidus_core(P_IC, S)\n",
    "                \n",
    "        '''CMB temperature'''\n",
    "        T_CMB = self.T_adiabat(self.planet.r_OC,T)\n",
    "        \n",
    "        '''Secular cooling power'''\n",
    "        QC = PC*drIC_dt\n",
    "        \n",
    "        '''Latent heat power'''\n",
    "        QL = PL*drIC_dt\n",
    "        \n",
    "        '''Gravitational heat power'''\n",
    "        QX = PX*drIC_dt\n",
    "        \n",
    "#         '''Entropy contribution of secular cooling'''\n",
    "#         SC = self._SC(r_IC,drIC_dt,P_IC,S)\n",
    "        \n",
    "#         TC = self._TC(r_IC,P_IC,S)\n",
    "        \n",
    "#         '''Entropy contribution of radiocativity (assumed to be 0)'''\n",
    "#         SR = 0.\n",
    "        \n",
    "#         TR = self._TR(r_IC,P_IC,S)\n",
    "\n",
    "#         '''Entropy contribution of conduction'''\n",
    "#         Sk = self._Sk(r_IC)\n",
    "        \n",
    "#         '''Dissipation temperature'''\n",
    "#         Tphi = self._Tphi(T,r_IC)\n",
    "        \n",
    "#         '''Efficiency factor'''\n",
    "#         phi = self._eff_ic(Tphi,TC,T_CMB,QC,TR,0,Sk,QX,T,QC,QL) \n",
    "        \n",
    "        '''Isentropic heat flux'''\n",
    "        qc_ad = self._qc_ad(k_c,T_CMB,r_IC)\n",
    "        \n",
    "        '''Gravity at CMB'''\n",
    "        g_c = self._gravity_CMB(XFe,FeM,Mp)\n",
    "                \n",
    "        '''Thermal buoyancy'''\n",
    "        F_th = self._F_th(g_c,qcmb,qc_ad)\n",
    "        \n",
    "        '''Compositional buoyancy'''\n",
    "        F_X = self._F_X(g_c,r_IC,drIC_dt)\n",
    "        \n",
    "        R_planet = self._R_planet(XFe,Mp)\n",
    "        rho_OC = self._density(self.planet.r_OC)\n",
    "                \n",
    "        '''rms dipole field @ CMB'''\n",
    "        Bc = self._Bc(rho_OC,F_th,F_X,r_IC)\n",
    "        \n",
    "        '''rms dipole field @ surface'''\n",
    "        Bs = self._Bs (Bc,R_planet)\n",
    "                \n",
    "        '''Magnetic moment (Am2)'''\n",
    "        M = self._magn_moment(rho_OC,F_th,F_X,r_IC)\n",
    "                \n",
    "        M_ratio = M/magn_moment_Earth\n",
    "                                                \n",
    "        return T,r_IC, drIC_dt, PC, PL, PX, Q_CMB, T_CMB, QC, QL, QX,qc_ad, F_th, F_X, Bc, Bs, M, M_ratio, P_IC\n",
    "\n",
    "    \n",
    "    '''Functions for calculations'''    \n",
    "    def dTL_dr_IC(self, r):\n",
    "        ''' Melting temperature jump at ICB (to be modified) '''\n",
    "        return -self.planet.K_c * 2.*self.planet.dTL_dP * r / self.planet.L_rho**2. \\\n",
    "            + 3. * self.planet.dTL_dchi * self.planet.chi0 * r**2. / (self.planet.L_rho**3. * self.fC(self.planet.r_OC / self.planet.L_rho, 0.))\n",
    "\n",
    "    def fC(self, r, delta): \n",
    "        '''fC (Eq. A1 Labrosse 2015)'''\n",
    "        return r**3. * (1 - 3. / 5. * (delta + 1) * r**2.- 3. / 14. * (delta + 1) \\\n",
    "            * (2 * self.planet.A_rho - delta) * r**4.)\n",
    "\n",
    "    def fX(self, r, r_IC):\n",
    "        '''fX (Eq. A15 Labrosse 2015)'''\n",
    "        return (r)**3. * (-r_IC**2. / 3. / self.planet.L_rho**2. + 1./5. * (1.+r_IC**2./self.planet.L_rho**2.) \\\n",
    "                *(r)**2.-13./70. * (r)**4.) \n",
    "\n",
    "    def rho(self, r):\n",
    "        ''' Density (Eq. 5 Labrosse 2015)'''\n",
    "        return self.planet.rho_c * (1. - r**2. / self.planet.L_rho**2. - self.planet.A_rho * r**4. / self.planet.L_rho**4.)\n",
    "\n",
    "    def T_melt(self, r):\n",
    "        ''' Melting temperature (Eq. 14 Labrosse 2015)'''\n",
    "        return self.planet.TL0 - self.planet.K_c * self.planet.dTL_dP * r**2. / self.planet.L_rho**2. + self.planet.dTL_dchi * self.planet.chi0 * r**3. \\\n",
    "                / (self.planet.L_rho**3. * self.fC(self.planet.r_OC / self.planet.L_rho, 0.))\n",
    "        #return 6500*(p/340)**(0.515) * (1./(1-np.log(XS * 1e-2)))    # XS is the amount of light elements\n",
    "    \n",
    "    def T_liquidus_core(self,P, S):\n",
    "        '''Melting temperature (Stixrude 2014)'''\n",
    "        \"\"\" T_{\\rm melt} = 6500 * (p/340)^{0.515} / (1 - ln(1-X_{\\rm S}) ) \"\"\"\n",
    "        return 6500.*(P/340)**0.515/(1-np.log(1-S))\n",
    "        \n",
    "    def _PL(self, r,P,S):\n",
    "        '''Latent heat power'''\n",
    "        return 4. * np.pi * r**2. * self.T_liquidus_core(P, S) * self.rho(r) * self.planet.DeltaS\n",
    "        #return 4. * np.pi * r**2. * self.T_melt(r) * self.rho(r) * self.planet.DeltaS\n",
    "\n",
    "\n",
    "    def _PC(self, r,P,S):\n",
    "        '''Secular cooling power (Eq. A8 Labrosse 2015)'''\n",
    "        return -4. * np.pi / 3. * self.planet.rho_c * self.planet.CP * self.planet.L_rho**3. *\\\n",
    "                (1 - r**2. / self.planet.L_rho**2 - self.planet.A_rho* r**4. / self.planet.L_rho**4.)**(-self.planet.gamma) \\\n",
    "                * (self.dTL_dr_IC(r) + 2. * self.planet.gamma \\\n",
    "                * self.T_liquidus_core(P, S) * r / self.planet.L_rho**2. *(1 + 2. * self.planet.A_rho * r**2. / self.planet.L_rho**2.) \\\n",
    "                /(1 - r**2. / self.planet.L_rho**2. - self.planet.A_rho * r**4. / self.planet.L_rho**4.)) \\\n",
    "                * (self.fC(self.planet.r_OC / self.planet.L_rho, self.planet.gamma))\n",
    "\n",
    "    def _PX(self, r):\n",
    "        ''' Gravitational heat power (Eq. A14 Labrosse 2015)'''\n",
    "        return 8 * np.pi**2 * self.planet.chi0 * GC * self.planet.rho_c**2 * self.planet.beta * r**2. \\\n",
    "        * self.planet.L_rho**2. / self.fC(self.planet.r_OC / self.planet.L_rho, 0) \\\n",
    "        * (self.fX(self.planet.r_OC / self.planet.L_rho, r) - self.fX(r / self.planet.L_rho, r))\n",
    "\n",
    "    def pressure_diff(self,r):  \n",
    "        '''Pressure difference (GPa)'''\n",
    "        K0 = self.planet.L_rho**2/3.*2.*np.pi*GC*self.planet.rho_c**2 /1e9 #in GPa\n",
    "        parenthesis = r**2/self.planet.L_rho**2-4./5.*r**4/self.planet.L_rho**4\n",
    "        return -K0*parenthesis\n",
    "    \n",
    "    def T_adiabat(self,r,T):\n",
    "        '''Adiabatic temperature''' \n",
    "        return T*(1-r**2/self.planet.L_rho**2-self.planet.A_rho*r**4/self.planet.L_rho**4)**self.planet.gamma\n",
    "    \n",
    "    '''Find inner core radius when it first starts forming'''\n",
    "    def find_r_IC(self, T0):       \n",
    "        def Delta_T(radius):\n",
    "            P = self.pressure_diff((radius))+self.planet.P0\n",
    "            Ta = self.T_adiabat(radius,T0)\n",
    "            #TL = self.T_liquidus_core(P, S)\n",
    "            TL = self.T_melt(radius)  \n",
    "            return (Ta - TL)**2\n",
    "        res = minimize_scalar(Delta_T, bounds=(0., 6e6), method='bounded') #, constraints={'type':'ineq', 'fun': lambda x: x})  #result has to be >0\n",
    "        r_IC = res.x\n",
    "        if r_IC < 1: r_IC = np.array(0.)\n",
    "        return r_IC.tolist()\n",
    "    \n",
    "    def _SC(self,r,drIC_dt,P,S):\n",
    "        '''Entropy contribution of secular cooling (Labrosse 2015, Eq. A11)'''\n",
    "        return (-4 * np.pi * self.planet.rho_c * self.planet.CP * self.planet.L_rho**3)/(3*self.T_liquidus_core(P, S)) * (self.dTL_dr_IC(r) \\\n",
    "                + 2 * self.planet.gamma * self.T_liquidus_core(P, S)*r/self.planet.L_rho**2 *(1 + 2 * self.planet.A_rho * r**2 / self.planet.L_rho**2) \\\n",
    "                /(1 - r**2 / self.planet.L_rho**2 - self.planet.A_rho * r**4 / self.planet.L_rho**4)) * (self.fC(self.planet.r_OC/self.planet.L_rho,0) \\\n",
    "                - self.fC(r/self.planet.L_rho,0)) * drIC_dt\n",
    "    \n",
    "    def _TC(self,r,P,S):\n",
    "        '''Temperature at which secular cooling contributes to the entropy balance (Labrosse 2015, Eq. A12)'''\n",
    "        return self.T_liquidus_core(P, S) * (1 - r**2 / self.planet.L_rho**2 - self.planet.A_rho * r**4 / self.planet.L_rho**4)**(-self.planet.gamma) \\\n",
    "                * (self.fC(self.planet.r_OC/self.planet.L_rho,self.planet.gamma) - self.fC(r/self.planet.L_rho,self.planet.gamma)) \\\n",
    "                / (self.fC(self.planet.r_OC/self.planet.L_rho,0)-self.fC(r/self.planet.L_rho,0))\n",
    "    \n",
    "    def _SR(self,h,r,P,S):\n",
    "        '''Entropy contribution from radiogenic heating (Labrosse 2015, Eq. A18)'''\n",
    "        return 4 * np.pi * self.planet.rho_c * self.planet.L_rho**3 * h / (3 * self.T_liquidus_core(P, S)) * (1 - r**2/self.planet.L_rho**2 - self.planet.A_rho \\\n",
    "                * r**4/self.planet.L_rho**4)**(-self.planet.gamma) * (fC(self.planet.r_OC/self.planet.L_rho,-self.planet.gamma) - fC(r/self.planet.L_rho,-self.planet.gamma))\n",
    "    \n",
    "    def _TR(self,r,P,S):\n",
    "        '''Temperature at which radiogenic dissipation occurs (Labrosse 2015, Eq. A19)'''\n",
    "        return self.T_liquidus_core(P, S) * (1-r**2/self.planet.L_rho**2 - self.planet.A_rho * r**4 / self.planet.L_rho**4)**(self.planet.gamma) \\\n",
    "                * (self.fC(self.planet.r_OC/self.planet.L_rho,0) - self.fC(r/self.planet.L_rho,0)) \\\n",
    "                / (self.fC(self.planet.r_OC/self.planet.L_rho,-self.planet.gamma) - self.fC(r/self.planet.L_rho,-self.planet.gamma))\n",
    "        \n",
    "    def _Sk(self,r):\n",
    "        '''Contribution of conduction to the entropy balance (Labrosse 2015, Eq. A20)'''\n",
    "        return 16 * np.pi * self.planet.gamma**2 * self.planet.k_c * self.planet.L_rho * (self.fk(self.planet.r_OC/self.planet.L_rho)-self.fk(r/self.planet.L_rho))\n",
    "    \n",
    "    def fk(self,x):\n",
    "        '''Labrosse 2015, Eq. A23'''\n",
    "        return x**5 / 5. * (1 + 5./7. * (2 - Ak + 4 * self.planet.A_rho)*x**2 + 5./9. *(3 + 10 * self.planet.A_rho + 4 * self.planet.A_rho**2 \\\n",
    "                - 2 * Ak *(1 + 2 * self.planet.A_rho))* x**4)\n",
    "    \n",
    "    def _Tphi(self,T,r):\n",
    "        '''Effective dissipation temperature (Labrosse 2015, Eq. A24)'''\n",
    "        '''T is T_melt(r_IC) when there is an inner core, T0 when there is no inner core'''\n",
    "        return T / ((1 - r**2 / self.planet.L_rho**2 - self.planet.A_rho * r**4/self.planet.L_rho**4)**(self.planet.gamma)) \\\n",
    "                * (self.fC(self.planet.r_OC/self.planet.L_rho,0)-self.fC(r/self.planet.L_rho,0)) \\\n",
    "                / (self.fC(self.planet.r_OC/self.planet.L_rho,-self.planet.gamma)-self.fC(r/self.planet.L_rho,-self.planet.gamma))\n",
    "    \n",
    "    def _eff_noic(self,Tphi,TC,T_CMB,QC,TR,QR,Sk):\n",
    "        '''Efficiency factor before inner core crystallization (Labrosse 2015, Eq. 40)'''\n",
    "        return Tphi * (TC-T_CMB) / (T_CMB * TC) * QC + Tphi * (TR - T_CMB)/(T_CMB * TR) * QR - Tphi * Sk\n",
    "    \n",
    "    def _eff_ic(self,Tphi,TC,T_CMB,QC,TR,QR,Sk, QX,T_ICB,QICB,QL):\n",
    "        '''Efficiency factor when there is an inner core (Labrosse 2015, Eq. 35)'''\n",
    "        return Tphi * (TC-T_CMB) / (T_CMB * TC) * QC + Tphi * (TR - T_CMB)/(T_CMB * TR) * QR - Tphi * Sk \\\n",
    "                + Tphi / T_CMB * QX + (Tphi * (T_ICB-T_CMB)/(T_CMB * T_ICB)) * (QICB + QL)\n",
    "    \n",
    "    def _Bc(self,rho_OC,F_th,F_X,r_IC):\n",
    "        '''rms dipole field intensity at the CMB (Olson + Christensen 2006, unit:T)'''\n",
    "        return beta * np.sqrt(rho_OC * mu_0) * ((F_th+F_X)*self.planet.r_OC)**(1./3.)\n",
    "    \n",
    "    def _Bs (self,Bc,r_planet):\n",
    "        '''rms dipole field intensity at the planetary surface, unit:T'''\n",
    "        return Bc * (self.planet.r_OC/r_planet)**3 \n",
    "    \n",
    "        '''Magnetic moment, unit:Am2 (Olson & Christensen 2006)'''\n",
    "    def _magn_moment(self,rho_OC,F_th,F_X,r_IC):\n",
    "        if (F_th +F_X) < 0:\n",
    "            return 0\n",
    "        else:\n",
    "            return 4 * np.pi * self.planet.r_OC**3 * beta * np.sqrt(rho_OC/mu_0) * ((F_th + F_X)*(self.planet.r_OC-r_IC))**(1/3)\n",
    "    \n",
    "    def _buoyancy_flux(self,F_th,F_X):\n",
    "        '''Buoyancy flux (from Driscoll and Bercovici, eq. 35)'''\n",
    "        return F_th + F_X\n",
    "    \n",
    "    def _F_th(self,g_c,q_cmb,qc_ad):\n",
    "        '''Thermal buoyancy'''\n",
    "        return self.planet.alpha_c * g_c / self.planet.rho_c / self.planet.CP * (q_cmb - qc_ad)\n",
    "    \n",
    "    def _qc_ad(self,k_c,T_cmb,r_IC):\n",
    "        '''Isentropic heat flux at the CMB, unit: W m-2'''\n",
    "        return k_c * T_cmb * self.planet.r_OC / (6340000)**2\n",
    "    \n",
    "    def _F_X(self,g_c,r_IC,drIC_dt):\n",
    "        '''Compositional buoyancy'''\n",
    "        return g_c * r_IC / self.planet.r_OC * self.planet.Deltarho_ICB /self.planet.rho_c * (r_IC/self.planet.r_OC)**2 * drIC_dt\n",
    "    \n",
    "    def _density(self,r):\n",
    "        '''Planetary density'''\n",
    "        return self.planet.rho_c * (1-r**2/self.planet.L_rho**2 - self.planet.A_rho * r**4/self.planet.L_rho**4)\n",
    "    \n",
    "    def _R_planet(self, XFe,Mp):\n",
    "        '''Planetary radius (Noack + Lasbleis paper), unit: m'''\n",
    "        return (7030 - 1840 * XFe*1e-2)*(Mp)**(0.282) * 1000\n",
    "    \n",
    "    def _gravity_CMB(self,XFe,FeM,Mp):\n",
    "        '''Gravity @ CMB (Noack & Lasbleis)'''\n",
    "        X_CMF = (XFe*1e-2 - FeM*1e-2)/(1-FeM*1e-2)\n",
    "        return GC*X_CMF*Mp*M_Earth/(self.planet.r_OC)**2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 800x320 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 800x320 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAtMAAAFBCAYAAAC1siPkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAMTQAADE0B0s6tTgAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAgAElEQVR4nOzdd1xT1/vA8U8CCKgMxQ1VHDgq272lbltH9adt3aNVa1tbx1e71do66qzauuqqoyrurcVWpWoVFdxFLSCiCLhFQQy5vz9uiVIFAwHCeN6vV14k996c8ySt8OTkOedoFEVREEIIIYQQQmSY1twBCCGEEEIIkVdJMi2EEEIIIUQmSTIthBBCCCFEJkkyLYQQQgghRCZJMi2EEEIIIUQmSTIthBBCCCFEJkkyLYQQQgghRCZJMi2EEEIIIUQmSTIthMiQGjVqoNFoWL9+farjZ86cwcrKCo1GQ1xcXLb0/emnn+Lh4YG9vT1ly5blnXfe4erVq2lerygKY8eOpVy5chQpUoSmTZty9uzZl/Zjjte4du1aWrRogZOTEw4ODtSsWZOvvvqKu3fvZmk/mTVu3DgsLCwoWrSo4fbOO+8Yzmf2vTZW8+bN+fLLL1963aJFiyhbtixly5Zl0aJFqc5Nnz6dvn37ZllMQggBkkwLITLg3r17hIaG4u7uTkhIiOG4oigMHjwYNzc3KlasSMmSJbOlf41Gw7Jly7h58yYXLlxAo9HQoUOHNK+fNm0aS5YsYc+ePdy8eZNGjRrRpk0b4uPj03xOTr9GRVHo168fI0aMYMiQIURFRXH37l1Wr17N+fPniY2NzZJ+skKDBg2Ij4833H799VfDucy811ktNjaWzz77jCNHjnDo0CE+/fRTw/t34cIFFixYwOzZs3MsHiFEwSDJtBDCaEFBQVhaWvLuu++mSjQXLFiAXq/Hx8eHunXrZlv/kyZNolatWhQqVAhHR0dGjx7NqVOnuHPnzguv/+mnnxg1ahQeHh7Y2toyYcIEkpKS2LRpU5p95PRr/P7779m6dSt//vkn3bp1w9bWFo1Gg5eXFxs2bKBq1apZ1ld2yuh7vW3bNsqVK2d4vHz5cjQaDVu2bAFAp9Nhb29PYGAgQ4YMITAwkO+//94wKv4iERERuLm54erqSqVKlXBzcyMiIgKdTke/fv2YO3cuDg4OWf/ihRAFmiTTQgijHTt2DA8PDxo1amRINGNiYvjqq69YsGABx48ff2GiOXToUBwdHdO8vfHGG5mKZ+/evVSoUIFixYo9d+7evXtERESkisfS0hIfHx+Cg4Oz/DVmxoMHD/juu+8YNWoUFStWzJI2/ysr3/vg4GBKlixJhQoV6NGjB+Hh4UDm3uvmzZtz8+ZNzpw5A8CePXtwc3Nj7969APz111+AOho+f/58mjRpwujRow2j4i/i5uZGeHg4YWFhXL582ZBcT5o0CV9fX1q3bm30axVCCGNZmjsAIUTecezYMerWrYuHhwexsbHcvHmTTz75hH79+lGhQgUuXbpEvXr1nnveTz/9xE8//ZSlsQQEBDB+/Hg2bNjwwvP3798HwNHRMdXxYsWKGc69SGZfY2b88ccfPHjwgJ49e6Z7XUREBF5eXvj4+ADg4eHBnDlzjOojq977//u//6N///6UL1+e69evM3r0aFq2bMmpU6cy9V7b2dlRv3599u7di7u7OwEBAcyfP5/Ro0cD6gclPz8/LC2N/zNVrFgxFi5cSI8ePQBYuHAhkZGRrFq1ihMnTjBp0iR2796Ng4MD06dPx83NLTNvhRBCpCLJtBDCaMeOHeO7777D2toad3d3pkyZwpEjRzh37hxHjhzBwsICX1/fbI9j+/bt9OrVi5UrV9K2bdsXXmNvbw/w3AS+O3fu4OzsnGbbGX2Ner2en376iW3btmFpaUmvXr1STcxLT1RUFBYWFpQvX/6l13p4eLB//36j2s0O7u7uhvvOzs4sWbIEBwcHDh8+bPhwkdH3unXr1oak2dHRkTfffJP333+ff/75h99++41evXplOM6OHTvSsWNHAJKSkqhXrx4LFy7k8OHD7N69m3379vHbb78xYMAAAgMDM9y+EEL8l5R5CCGMcvXqVaKjow1f5deqVYtp06YxZ84cihQpwrFjx3B3d8fW1va55w4ZMiTVKhD/vbVr187oOFatWkXPnj1Zu3Ytb775ZprXOTg44OrqSlBQkOGYTqcjJCTEMMKbFa9x5MiR6HQ6PvroI4YOHcrJkyf54YcfjHot5cqVIzk5mcjISKOu/6+vv/6apk2b0qBBAxYuXPjCa7LyvX+WRqNBo9GgKEqm3muAVq1aERgYyJYtW2jTpg0ajYZWrVqxdu1agoKCaNWqleFarTbjf67GjRuHn58fTZs2JTg4mIYNG2JpaYmfnx8nT57McHtCCPFCihBCGGH9+vWKnZ2dkpycrCiKooSHhysHDx40nO/UqZMyaNCgbI1hzpw5iqOjY6p+0/P9998rr7zyinLmzBnl0aNHyueff66UK1dOefDgwQuvz+hrTExMVDp37qwoiqLMmzdPWbp0qaIoitK+fXvDNUuXLlXS+lWbmJioVKtWTfHz81NCQ0MVvV6vJCQkKAEBAcp7771nuC48PFyxt7dXmjVrpjRr1kxZtWqVsmfPHqV3796KoiiKTqdT6tevr0RHRxv1vmTG2rVrlbi4OEVRFOXGjRtK7969lQoVKij3799XFCXj77WiKEpycrJSrFgxxcHBQdm6dauiKIqyfPlyxcHBQXF1dU117TvvvKN069bN6Hj/+usvxd3dXUlISFAURVE2btyo1K1bV4mPj1fWrl2reHp6Zuj1CyFEWqTMQwhhlGPHjlGrVi3DCKGrqyuurq6G80FBQXzzzTfZGsNHH32EpaXlc6Opu3btokmTJgwZMoQrV66wa9cuAEaNGsWDBw9o2bIl9+/fp3bt2uzevTvN1SAy+hqTkpKwtLSkfv36xMbGotFomD9/PqVLlzZcc+XKFZo1a/bC/qytrQkMDOTbb7+lffv2xMTEYGtrS40aNejfv3+qa/9b5jF16lSOHj1K8+bNAXUy45UrVyhTpkz6b2ImrVy5kg8++ICHDx9SrFgxmjZtSkBAAHZ2dkDG32tQR5tbtGjBli1b8PPzA9TSj/v379O9e/dU144cOZIBAwZQrFgxFEVJd/3txMREBg4cyJIlS7CxsQGgc+fO7N69GxcXF8qUKcPSpUtNfUuEEAIAjaIoirmDEEKIvKpHjx4MGDCAsLAwbGxsUBSFM2fOMG3aNAAaN27MjBkzTFoBJCIigl69evHnn38aju3evZuNGzcayjt0Oh0WFhZoNBrTXpAQQogMkZFpIYQwwYIFCxg9ejShoaEoikKDBg2YNGmS4fyzCXBWatu2LcePH6dp06ZYWFhgY2PDxo0bX1izLoQQIvvIyLQQQgghhBCZJKt5CCGEEEIIkUmSTAshhBBCCJFJkkwLIYQQQgiRSZJMCyGEEEIIkUmSTAshhBBCCJFJkkwLIYQQQgiRSZJMCyGEEEIIkUmSTAshhBBCCJFJkkwLIYTIFYYNG4arqysajYaQkJCXXn/9+nXatGlDtWrV8PT0pGvXrsTFxRnOt27dGk9PT7y9vWnSpAnBwcHZGb4QooCSHRCFEELkCgcPHqRSpUo0btyYzZs34+3tne71MTExXLp0icaNGwPwv//9j7i4OJYtWwbA3bt3cXR0BGDTpk2MGzeOU6dOZetrEEIUPDIyLYQQIldo2rQpLi4uzx0PCgritddeo3bt2vj4+ODv7w9A6dKlDYk0QL169YiIiDA8TkmkAe7du4dGo8m+4IUQBZaluQMQQggh0nL37l0GDRrEzp07KVu2LDdv3sTX15eGDRvi7OxsuC45OZm5c+fSqVOnVM/v06cPf/zxBwA7d+7M0diFEAWDJNNCCCFyrcOHDxMWFka7du1SHQ8NDTUk04qiMHToUIoVK8bHH3+c6rpffvkFgOXLlzNmzBhJqIUQWU6SaSGEELmWoijUrFmTw4cPp3nNsGHDuHr1Kps3b0arfXH1Yt++fRkyZAi3bt3Cyckpu8IVQhRAUjMthBAi12rYsCHh4eEEBAQYjoWEhJCUlASoifTly5fZtGkThQoVMlxz9+5drl+/bni8efNmnJycKF68eM4FL4QoEGQ1DyGEELnC4MGD2bFjBzdu3MDJyQk7OzsuX77MyZMnGTVqFLdu3eLJkyeUL1+ezZs3c+LECRo3bkz16tWxtrYGoGLFimzatIkrV67QrVs3EhIS0Gq1lCxZkmnTpr10hRAhhMgoSaaFEEIIIYTIJCnzEEIIIYQQIpMKxAREa2trSpYsae4whBBmFhcXx+PHj80dhngBjUaT5uRBIUTBoNfryYsFEwUimS5ZsiRRUVHmDkMIYWYv2hBE5A5arZbk5GRzhyGEMCMLCwtzh5Ap+TqZ9vf3x9/fn4SEBHOHIoQQQggh8qECMQHRxcVFRqaFEPK7IBezsLCQkWkhCri8+ntACtSEEEIIIYTIpHxd5iFEXpRXJ2DkBjKJTQghRE6TZFqIXCIpKYnIyEiePHli7lDyNCsrK8qXL59qNzwhhBAiu0gyLUQuERkZiZ2dHU5OTmg0GnOHkycpisKtW7eIjIykSpUq5g5HCCFEASDJtBC5gF6v58mTJzg5OWFpKf8sTeHk5MTt27fR6/VS8iGEECLbyV8aIXKBlBppGZE2Xcp7KHXnQgiRP+3cuRNfX1+8vb1xd3dn+fLlZo1HhsDS8vAB3LkJxwPB0Qmav27uiIQQQvxLr9fzyy+/4OPjg5eXl7nDEULkEEVR6NWrF/v378fT05OIiAiqV69Oly5dsLOzM0tMMjKdlh++gnHvw/bVsHIOHPrN3BEJkeN0Oh3jx4+nevXquLu74+3tzaBBgwgJCUGj0dCpU6dU148dOxaNRsPmzZsBGDduHCVLlsTb2xsvLy/q1KnD4cOHzfFSRD5z/vx5rly5wubNm/nrr7/Q6/XmDkkIkUM0Gg13794F4P79+zg5OWFtbW22eCSZfpE7NyHsb/V+665QrAQsmwlH9qX/vL0bYcbnoNNlf4xC5ICBAwdy/Phxjhw5wtmzZwkODqZVq1bY29vj4ODAxYsXiYmJAdSRwl9//RUPD49UbfTs2ZOQkBBOnTrFyJEj+fjjj83xUkQ+ExkZabi/Z88e1qxZY8ZohBBZQVEUXFxcDLcZM2Y8d41Go2Ht2rV06dKFChUq0LhxY5YvX27WFZykzONFzp1Uf/YbAY1bQ7PXYfoYWDIN7t2GVl3gRfvHr1uo/gzcBX4dci5ekT/NGQtx0dnTdsmy8NH4dC+5fPky/v7+REZGUqxYMUD9JdatWzciIiIA6NWrF7/88gv/+9//CAgIwMfHx5Bcv8i9e/cMbQlhiuvXr6d6fPXqVTNFIoTIKhqN5qW71Op0Or799ls2btxI06ZNCQoKomPHjpw5c4YSJUrkUKSp5euRaX9/f7p3705CQkLGnngtXP1Z1V39WbocjJ4KpcrB+sXw5buwZz3E30/9vBJl1J+rfoRffgCZACXysJMnT+Lm5pbuL6e+ffsaJn4sWbKEAQMGPHfNqlWr8Pb2pmLFinz++edMnDgx22IWBce9e/cA+OSTTyhcuDCJiYk8evTIzFEJIbJbSEgI169fp2nTpgDUqVMHFxcXgoODzRZTvh6Z7tatG926dcPFxcX4JwUdhN82QeGiT5NjUO9//SPs9of928H/Z9iyAnp8oI5eAzxOfHr9wV2QnAxt/g/Klc+aFyQKlpeMHOcGKV/Fbd++nRMnTrB69WomTZqU6pqePXsya9YsAPbt20eXLl0IDQ3F1tbWHCGLfOLx48doNBocHBxwdnbm0qVLnDhxgiZNmpg7NCFENnrllVeIjo7mwoUL1KhRg8uXL/PPP/9QrVo1o57/4MEDAgMDiYqKwtbWFi8vLzw9PU2KKV+PTGdYzHX4eYp6v/kb8N81aq1toFNv+H4FvDcGijrAshmwbwvo9epItU9DmPKL+jX6ob3w9SD49iPQya52Im/x9fXl0qVL3Lp1K93r+vfvT//+/Xn77bdfuq5zixYtSExM5OzZs1kZqiiAdDqdYU32lNU8zp8/b86QhBA5oHTp0ixcuJDu3bvj5eXFm2++ydy5cylfPv2ByytXrtC3b18qV67M9OnTOXDgAJs3b+btt9+mevXqLFmyJNMx5euR6Qz7O1gdTR76Ffg2Svs6q0JQzw9q+MCk4bBxKVT1AEUPdg7gVAq+WwyXzsLU0RBxCYZ0gC79of1bOfd6hDBBlSpV6Nq1KwMHDmTZsmU4OjqiKAobN27Ex8fHcF3nzp2JiIigV69eL23z1KlTxMfH4+rqmo2Ri/zu0aNHKIqClZUVADVq1ECj0RATEyOb9QhRALzzzju88847GXpO7969GTVqFIsXL35uc7SIiAgWLFjA3Llz+fDDDzMcj/zGedadm+rPskaWZdg7wjtD1PKOFbPVY3YO6k+tFqp5wodjn16/cSmM6gm7/DO/4seNqzB3HERcfFqznZwM1yPVyZHrl8Dd9EcShTDWkiVL8PLyol69etSsWZNXX32VvXv3cv/+0/kC1tbWjBkzBmdn5xe2kVIz7eXlRd++fVmxYgUlS5bMqZcgzODx48d8+OGHuLm54eHhYdQHLWPFxMQwdepUAIoUKQKAVquldOnSKIrCuXPnsqwvIUT+cfDgQTp27PjCXYZdXV2ZNGlSphJpAI1SALYJc3FxeensUADWLICATWoZR/EM/LH//n9w8Yx6v8dQeK3j89e82/b5YzV8oFl78KqnjnaDmmTrk8HCEm7FqLXZwZlYl7d4SfDrqE6eLGQN7rXVtmWr6lwpOTmZixcvUrVqVSxetFKMMFp676XRvwuESYYPH45Op2P27NloNBpu3LhBmTJl0n2OhYUFycnJL2170aJFhpU8fHx86NhR/X179OhRdu/eTfny5enfv7/pL0IIkeOM/T2QEYmJiWi12lRL50VHR1O2bNks60Myq2cl/TuB0NomY8/z6/A0ma7d9MXXzN+mTkrcv10dRQa4EKzessPtONiw+OnjYiXUkffXOkKdZlCp+ouX9xNCCBM8fPiQxYsXExUVZdja/WWJdEakfCtSq1Yt2rZ9OkhRq1Ytdu/ezbVr17KsLyFE3jZz5ky2bduGpaUllStXZsaMGdja2tKzZ09+//33LOtHkulnpazGUSiDu+j4NADvBupPe8cXX2NppSayr3WEJ0nqjoor57y8badS4OYO1b3UZNijLjhXgMDdaoJsVQiK2qsTHmOvgwJEhallIId+g+R/y0lSSlh+36reADzqQJO24FoV7t9RfwohhAn++ecfihcvzsSJEwkICMDW1pZx48bRokWLVNfNmDEj1YYMxn5JmpiYiEaj4Y033kh13NLSkuLFi3P79m3CwsKoVKmS6S9GCJGnbdiwgT///BOA3377jQ4dOjBv3rws70eS6WelbEdrkcG3xdIqdW30y1gVguavqzfdE7hyGVwqqslw7HW1JONlo+MvKiWp+O+yMJWqQdN20Odj9TU9SYJH8XAhBA7shH/+nfF+Jki9PatRa2jTFcq88vxqJkII8RI6nY4rV67w6quvMnnyZMOumefOnaN06dKG60aMGMGIESMMj40tb1IUJc0Jhp6enuzfv58//vhDkmkhBMnJyYaVf1q1akWNGjXo378/Fy9ezNJ+JJl+lj4ZNJqcTSItraByDfX+K5XUW1bSatXE3NoGGrZUb/t3wO1YdcR7ywp1FDvFob3qzbYIvD0EavqCo1PWxiSEyLfKly+PVqulZ8+egFrXXLFiRc6cOZMqmc4sRVEM5SP/1aRJEw4ePEhUVBSJiYnY2GSwZE8Ika9MmzaNmzdvGkrNXFxc2LFjB6tXr87SfiSZflZyMmgLQB1x89ef3q9ZC84GQWkXOPoHbF2pHk94CEunqx8ufBupI93OrpJYCyHSVaJECVq0aMGePXto37494eHhhIeHU6NGjSzrI61kWqvV4ubmRmhoKDt37qRLly5Z1qcQIu9p1Oj5ZY4LFSrE22+/naX9yPf4z9InF7xJeVoteNaD0s7QsRcs3AlVXlXPtemqbkxz4k+Y+YW6rN93H0PSY0iUbXuFEC82f/58pk6dioeHB507d2bBggVpLp2Y1dq3bw/A2bNnSUxMfMnVQoiC5oMPPsDR0REHBwcaN27Mxx9/zPLly01qU0amn5WcDJoC/vlCq4VPvoMnj8HOERq2gn8uwIN7sGkZhIfC0E7qtS06QWKCurxfpepmDVsIkXtUqlSJP/74I1vaTq/MA8De3h43NzcuXbpk2N3sWXfu3MHW1lZKQIQooHbt2sXNmzextLTk1KlTnDhxgsDAQPr27ZvpNvN15ujv70/37t1JSEgw7gkFcWT6RWxs1UQa1NKOpu3g9bdhlr+6EU2KfVvU+uol0yH4iPphROQ7GzdupFatWnh7e1O9enVee+019CmTdTNgwYIFVK9eHW9v75duUS6EKTp37oxGoyE0NDTV/2spa1/PnDnTjNEJIcypWrVqFC5cGBsbG+rVq8fQoUP5+eefTWozX49Md+vWjW7duuHi4gKKotb/pqeg1ExnVlE7+N/36gohf+5RE+4LwepSez+Of3pd+7fUGuxqHuBU+uXvu8i1oqOjGTRoECdOnKBChQoAnDx5Mt2Rwf9KmUk9a9Ysli5dSoMGDbIrXFFAvOz/v8KFC1O7dm2CgoJYt24d77//PgDx8fEAJCUlZXuMQojcacKECXzwwQdMmDCBEiVKZEmb+TqZNtDp1HrfVm9C225pX6dPBot8PVifNbRadbQawLu+Wu7x0wS4FqEe27n26bVF7NRNbVwqqmtxyw6MRvs0aDHXHt7Mlradi5Rgcp2BL70uJiYGCwsLihcvbjjm6+sLqNuvbt68GW9vbwBq167NtGnTaN68Oc2bN8fT05OgoCBsbW0pXrw4//zzD/369cPDw4M1a9bw+uuvc+vWLRISEvDy8mLRokWG7aGXLl3KDz/8gKIoWFlZsX79elxdXdmzZw8TJkwgISEBCwsLpkyZgp+fXza8QyK3elmZR4q2bdsSEhJCbGwssbGxlCpVikePns71uHv3Lo6OaewLIITIt6ZOncrevXv59ddfcXFxoXbt2tSuXTvTW4lDQUmm4+/Bvdtqze+rPlC+youv0+tlZDqjNBp18uKIiXD9CjgUh2MHIHAX3L+rfiOw/ZklaPqPVJfnk9HqPMHT05PGjRtToUIFmjVrRsOGDenRo4dRk8kuXrzIwYMHsbKyAtTke+3atXh7e6MoCqtXr8bJyQlFURg6dChz5szh008/Zf/+/XzzzTccPnyYsmXLGhKgsLAwxo0bx549e7C3t+fy5cs0adKEiIgIrK0zuNGSyPe0Wi0+Pj4cO3aMgIAAevTowcOHDw3nz50798KZ/kKI/C0oKIjo6Gisra0JDQ0lKCiI48ePm9RmwUimFQW6DoTNy2DG59CmG9jZqxuUPJvUJUvNdKY5FFdvAJ37QKfe6kYxllZw6SysW6Qm20unwx/b1NFsRYH6fuoHGH2yus26S0Xzvo5cxJiR4+ym1WrZsGEDf//9NwcOHGDXrl189913Rv3i6dWrlyGR/i9FUZg5cyY7duxAp9Nx7949GjZsCMCOHTvo3bs3ZcuWBdSv7AF2797N5cuXadq0aar4IiMjcXNzM/WlijzE2DIjPz8/jh07RlhYGHq9PtXqHpcvX5ZkWogCqGbNmmi1WjQaDdWrV6d69er07t3bpDYLRjIN0KSNug33/O9gw2L1mIWFmsjVba4m1Xqpmc4yGo1a4gHqjo7utdXdFtcvVjeJWTxVPbd8JlRwA/tiEHIERk1Rt04XuUrKL5zBgwfTtm1btm7diqWlJcnPTDr97zJkRYsWTbO91atX8/vvv3PgwAHs7e2ZPXs2v//+e7oxKIpCq1atsnyxfZH3GJtM29jYULp0aWJiYjhz5gyPHz82nIuOjs6u8IQQuZi9vT1vv/0206dPp2LFrBnAK1gFwp51YdJSaPbvpiWLp8GiKXD5nJpIywTE7OVRR53AOGCUutX5K5XVnRbD/lYTaYBpY2DiJ+q253eyp15YGO/atWscOnTI8PjOnTuEh4dTuXJlqlSpwtGjRwE4duwYoaGhRrd7584dSpQogb29PQ8ePGDZsmWGcx06dGDlypWGZOfRo0c8evSINm3aEBAQwOnTpw3XHjt2zMRXKPKijEyA9fDwANSyjmdXdnr8+LHJa8sKIfKeihUrkpCQQP369XFxcaFz5858++23JrVZcEamUzgUh7cGwYEdT49NGaVu433vNhQvab7YCoKi9mrNNDydxHj9CmxcCiF/qY/D/lZvFdzgix/U1UKKlYBajc0TcwGm0+n45ptvCA8Pp3Dhwuh0Ovr27UunTp1wdnamb9++LFiwgAYNGlCzZk2j2+3Tpw9btmyhWrVqlCxZkiZNmnDlyhUAmjZtytixY2nTpg0ajYZChQqxfv16qlSpwurVqxk8eDCPHj0iKSkJHx8fGakW6fLy8iIgIIDo6GjDzP2qVaty8eJFrl27ZubohBA57dnEOSoqihMnTnDixAmT2tQoiqKYGlhu51LEhqiYWDWRS3Fwl7qe8oGdEPp0pIsGLWHgqJwPUqjfDuzyVyeKpijtDDH//sGzsAA0aoJdvrI5Isw2ycnJXLx4kapVq2IhdfsmSe+9dHFxISoqykyRifRYWFikKhtKy/jx4ylatCgjR440uu2JEyfy5MkTfHx8CA4OpkmTJhw/fpyEhAS++OILLGWVISFyBWN/D+Q2Bfc3iGFptwbqDn+nj8HjBOjS37xxFWRaC2jXHXwawJMkWDYLHj14ej7lH9g3H6j/3T4ca544hRB5SokSJYiOjjZ8kEqppY6IiGD9+vXP7ZIohMjfdDod58+fJyQkxHB72byd9BTcZDpFIWuo4a3ehPlptVBO3RyEsT+qPxUFosJhz3r469//2UOOqB+AHIvDyrlg5wAfjX9xm0KIXE+j0bBlyxY6dOiAVvvi6TwpO29mpGYaoEqVKkRHRxt2Q7S1taVbt25Mn9rTRykAACAASURBVD6d0NBQIiMjKV++vGkvQAiRI27dukWLFi0Mjx89ekRYWBixsbGp9kT4r9mzZxMSEkJwcDAXLlzAwcGB+Ph4hg4dSp8+fUyKqWBNQBR5k0aj1rS/OxomLYPC/64SMftr+OZDtb761FF4ty2cOwGPEyHxUbpN5jYpyUEBqLrKdinvYUYTLmFeNjY2hISEpJrw+l+ZTaarVauW6vm2trYULlyY1157DQB/f//MhCyEMAMnJ6dUI8qDBg2iXbt26SbSAMOHDycqKorp06cTGRlJTEwMpUqVYurUqfTr18+kmCSZFnlLyTIwez2MmaZOFnUqBV36PT0/8wv4oDN81h+ir5otzIzSarVYWVlx69YtdDodycnJcsvETafTcevWLaysrNIc3RS5U8p/rwsXLqR5TWaT6ZQ1y1OkrF3eqFEj7O3tiY+P58iRIxlqUwiROyxevJiBA1++L8PRo0eJj49n2rRp3L9/H8i6QRcp8xB5k5s7fPuzet+qEFwNh6ADatlO0mN4cA++eg+GT4SavmoN9qbl8FoHKFHGvLGnoXz58kRGRnL79m1zh5KnWVlZyVf2eVBKohwXF5fmNTqdDsj4H0CtVouNjY1hLfRntxFv3rw5W7du5Y8//qBBgwYZDVsIkYUURcHFxcXweMSIEYwYMSLN6w8fPsydO3d44403Xtp27dq1OXz4MMuXL6dly5Z07949yyY7SjIt8q5Cz2whPfgz9XbzBuiewO/b1CX15n8LDVvBuZNw46q6pvjns8wXczoKFSpElSpV0Ov1Uu6RSRqNRkak8yhFUXBwcODevXvExMRQunTp567J7Mg0YFixw9LSEnv7pys7pWza8OTJE27evGlYPk8IkfM0Gk2GVlxavHgxffr0ydCKPH379qVr166MHz+eW7du8fPPPzNw4ECTRqnlr47IX0qUgTKvQI+hMOwbSHgE+7aoiTSo9dXzJ8K1CPXxkX2wZBr8+0c6N9BqtVhYWMgtEzdJpPO2lNrmgICAF543JZn29PQEMGxbn+LZUep169ZluF0hhHnEx8ezbt06BgwYkOHnFi1alKlTp3Ly5Ek2bdqEl5dpOy/n6788/v7+dO/e3dxhCHPxrKtu/PJfxw/Cz99DXLS6rfnhABjUXh3Jvh6Z83EKIQDw8/MDICwszJA4PyvlK9nMJNMtWrTgo48+MvTxrE8++QRQS0xM3bxBCJEz1q5di5eXF9WrVzfq+pQde59VtWpVduzYwcSJE0lISOD8+fOZiiVfJ9PdunWTkYaCbuQkmLYKpq+GERPhsxng6gZXw9RJis9a/RN8/e/umPEPXtyeECLb2NjY4OzsjF6vZ9OmTc8l1KYk01qtNs3Z/g4ODhQpUgSA7du3Z7htIUTOM3biYYrp06fTqlUrli5dyvnz57l16xbXrl3j999/5+DBgzRo0ICYmJhMxZKvk2khKFwUHJ3UbeRf9YXKr0Lf4WDnmPZzVsyBUT1g70YID5XEWogc1KVLFwDOnj3LDz/8kOpcSjKdHeU8Xbt2NdxPSkrK8vaFEFnr8OHD9O9v/EZ769atY+LEiRw6dIiOHTvi7OyMp6cnEyZMoEKFChw6dOiF31wZQyYgioLnlUowdQXcuw2/zgP3OlDUDqysYcVsuHtLncS4buEzz6kMQ76A0uXMF7cQBUDx4sV56623WLt2LQ8epP4ga0rN9MukTEQE+P777/nyyy+zvA8hhHnVqVOHOnXqZHm7MjItCiZLK3AqDR+Og+avQ+2m4FVP3XVx6FdQ1D719Vf/ga/fgw+7wLZVZglZiIKievXq2NvboyiKYTk7MK3MwxhVqlQx9DNv3rxs6UMIkf/IyLQQz7JzBN9G6g0gORk0wOkgtZb6RhRsWaFOVHQqDe27P92RUQiRZYoWLcr9+/f5/vvvcXFxYcCAAdk6Mg3wzjvvsHXrVk6dOkVsbCxXr17llVdeyZa+hBD5h4xMC5EeCwvQWoB3ffh4Anw6HUo7qxvE7F4Hw/4Prl8xd5RC5Hn/XVs9ZbKgoihcvaoubZndybRWq6Vjx46Gx0uWLMmWfoQQ+Ysk00JkhENxmLAQBn369NiWFRBxUa3BFkJkiWLFiqV6fPv27WydgJhCq9Xy/vvvGx77+/tnW19CiPxBkmkhMkprAd4N1LprgJOH4Nth6uTFe7fhcWL6zxdCvFTjxo1xdnY27IQYGBjI48ePgewbmU5RqlQpPDw8ADh//jxr167N1v6EEDlLr9dz/fp1IiMjDTdTSDItRGYUsobZ69WtyVO+ng75C74aBFNGqTsqPpQl9YTIrEKFCvHuu+8adi4MCQlh586dQPaOTKfo0qWLoZ+///6b48ePZ3ufQojst2zZMhwdHfHw8KBWrVrUqlWL2rVrm9SmJNNCZFYha6hUHT4YC+UqqMcexUPkZXVHxZE9IOKSeWMUwgxcXV2pVq0a3t7eeHt7mzSy6+vra7j/8OFDACwtc2bu/LBhwwz3d+zYwYULF3KkXyFE9pkwYQJBQUHcunWLuLg44uLiiI2NNalNSaaFMJVPA2jcRr1v5/D0uO4JfPsRLJ+lln5cPKMei78PCQ/NE6sQaXjw4AE7d+5k4cKFrFixgtOnT5vU3tq1awkJCSEkJIS33nor0+3Y2NjQrVs3LCwsDMfs7OxMis1YDg4OqWJft24dGzZsyJG+hRDZo0SJElSrVi1L29Qo/51CnQ+5FLEhKib2+bWDhcgqOh3cjIZSzuryecf2w/bVT89rtWrpR4rKr6pbm4sc5eLiQlRUlLnDyFWuXLnC119/za5du/Dw8KBMmTIkJiZy4cIF9Ho9o0ePZsCAARlq09XVlc2bN+Pt7W30cwoXLsyjR4/SPB8aGsqaNWuwsLBg8ODBlCxZMkMxmeLQoUMEBASkOlanTh3at2+fYzEIURBYWFgYJhpntfv37wPw448/YmtrS48ePbCxsTGct7fPfI4oybQQ2SXkCPwyGypUUUejLS3h0rmn57+aAxXczBdfASTJ9POaNm3KqFGjaN++/XPlExERESxYsABnZ2c+/PBDo9t0dXU1bLpSt25dJk+e/FzyO2PGDGbMePqB8vbt2+km0wBxcXEUK1Ysx8o8/mvhwoVER0cbHhcuXJjOnTvj7OxseCyEyLzsTKa1Wi0ajSbVMpwpjzUajUn9SjItRE7asgJuxcLh39Q664rVwLOuWmddzw+K2KnL74lsIcl0zoiMjKR8+fI8efKEL7/8kjNnzhgmD6blZSPTucWaNWsIDQ194bn27dtny1bFQhQU2ZlMp4iLi3vuw/2LjmWEJNNCmMOcsXDq6PPHC1nDe2OgiD1Udc/5uPI5SaafSkxMRKvVUqhQIcOx6OhoypYtm6X9REdHU7VqVR48SH91m7ySTKeIiYlhzZo13L17N9VxZ2dn7OzsePz4MX369DFTdELkTTmRTPv6+nLy5MmXHssI2U5cCHP4cBycD4bbsRAVDqGn1Z9Jj+HHb8DCElp2hpJloWk7dTT7Tpxaa/3MRCwhMmPmzJls27YNS0tLKleuzIwZM7C1taVnz578/vvvJrX98OFDnjx5gqOjIwC//vorPj4+WRF2rlK6dGk+/vhjdDodv/76K2FhYQBcu3bNcM21a9cMJSBCCPNKSkoiMTGR5ORkHjx4YCj3uHfvnmGloMySZFoIc9BooObTJb+4fxf2blQ3fUlKhLMnYM969dyJP+FCsHq//0ho1Aq2rYK7t6FEaYj8BwZ/lvOvQeRZGzZs4M8//wTgt99+o0OHDsybNy9L2o6JiaFr164kJyejKAqVKlXil19+eenz8uqXpJaWlvTu3ZtHjx4xderUVOd+/vln2rVrR926dc0UnRAixaRJkxg/fjygrtSTwt7enpEjR5rUdr4u8/D398ff35/DO7ZKmYfIW66Gwc0Y2LQMrl95erxFJyhWAtYvVh9b26jL7n2/Aorn3OoGeZWUeagaNGhAYGCgYSJfVFQU/fv358KFC2Z7f2xtbUlISDBL31lFp9Nx+PBhoqOj+fvvvwH1D/X777+fatUAIcSL5USZx/vvv59lgwcp8nUynUJqpkWedf0K/DoPOvSCWV+oy+vpnjx/3Xtj1AmMIl2STKsOHTpE5cqVKVOmjOFYUlISq1evpl+/fmaJKT8k08+aOnVqqhpwb29v7O3t8fOTf6dCpCW7k+nk5GQ+//xzpkyZkqXtSjItRF4x4SO4cgl8G0HPD+GLgZD4zIQtZ1dwdFJXCOnUGw7tVZfi6zdcLSsRkkznYvktmU5MTMTf399QS52ievXqJCUl0bt3bzNFJkTulRMj03Xr1uXYsWNZ2qYk00LkFREX1YmIvo3U5HjjMnVJvbPH1fMWlpCsU+83aq0m0wDfLoIyr6j3b8eBvSNYWuV4+LmBJNPpS0xMNFs5Qn5LplPEx8fzww8/oNPpUh3v2bMnVapUMVNUQuROxibTjx8/ZuTIkezZswcbGxu8vLxYuXKlUX2MGzcOKysr+vfvT9GiRQ3Hs33TlgcPHhAYGEhUVBS2trZ4eXnh6emZ6U5zmiTTIl/bskKdoDj4c7XG+nDA89e06ARt/k8dzW7TFTr3zfEwcwNJptP2wQcfsHjxYqytrfHw8KBWrVr4+vrSt2/O/L+SX5PpFNHR0SxcuDDVsWHDhlGsWDEzRSRE7mNsMj18+HB0Oh2zZ89Go9Fw48aNVGVr6dFqtYb7ObJpS3ZsM2sOkkyLAuV4IJw7oW4G8+M3T4+XdoaYa2oZiFMpqN8CvOubL04zkGQ6bZUqVeL06dNYWlpy6tQpTpw4wcmTJ/n5559zpP/8nkyDusvj3LlzDSuXODs78+6775o5KiFyD2OS6YcPH1K2bFmioqJMGk3OSukm09mxzaw5SDItCqTkZBj8unrf2hYe/ydR8agDH0/I+bjMSJLptLVr144dO3akGrXJSQUhmU4xb948YmNjAfWr5Y8//ths77sQuYlWq6VcuXKGxyNGjGDEiBGprjl9+jQdO3bk7bffJiAgAFtbW8aNG0eLFi1yOlyDdJPp+Pj4VPUkeZUk06LAeret+rPrANiwJPU5m8Lq6HWdpuDTMOdjMwNJptN2/PhxFi9ezIQJEyhRokSO91+QkmmAVatWcfnyZUBNINq2bStbkYsCz5iR6ZMnT1KrVi2WL19Onz59CA4OplWrVpw7d47SpUu/tI/Y2FjGjh3LqVOnSExMTNVuZqX7Ubhp06aZblgIkQv0G6Emyq91hLrNoNnrT88lPoJj+2G3PzxJgplfwIEdEHsdHtxNs0mRP02dOpU1a9ZQpUoV3N3d6devH3PnzjV3WPlWz549adasGQB6vZ6dO3eaOSIh8oby5cuj1Wrp2bMnAD4+PlSsWJEzZ84Y9fyBAwfi6urKzZs3GT9+POXKleP1119/+RPTkW4yXQAW+hAif2vcGj74Wt3cZdBn8PrboNWqS+ilCAuFHWvUOuv1i+HrwfBpfzi4S32c9Nh88YscExQURHR0NHfu3GH9+vW0aNGCS5cumTusfK1x48apvv39+eefOXr0qBkjEiL3K1GiBC1atGDPnj0AhIeHEx4eTo0aNYx6/tWrVxkzZgzW1tZ06NCBjRs3EhDwgon7GZDuduKJiYmcOXMmzaQ6L63oIYRA3SXx81nq0njj3lePKXrYvlpNshP+Xbda9wR++UG971AcWr2p3tfrIS5ancwo8pWaNWui1WrRaDRUr16d6tWr5+hayAVx8MbS0pLhw4ezcuVKwsPDuXbtGteuXaNWrVrPzVMSQjw1f/58Bg4cyJgxY9BqtYY5fMYoVKgQADY2Nty6dYtixYpx8+ZNk+JJt2ba2toaZ2fnF/6S02g0zy1Gn1tJzbQQLxB8BByKwcRP1MdDv4J9W9SJifbFYNc6iI5Uz1WsptZdR4XDmvnw9Vwo7QJhF6C6d57ZFEZqptPWs2dPEhISmD59OhUrVszx/m1sbFLVLxY0J0+eZNu2bQCUK1eOgQMHyqREUeDkxKYtvXr14ocffmDlypXMmTMHe3t7qlatypo1azLdZrrJtI+PD8HBwZluPLeQZFqIdERcVEefi71g0lngblj1o3pfn6xecysW2nZT661vx8GoKVDdK0dDzixJptP25ZdfGpbDs7Kyonbt2tSuXZsvv/wyR/ov6Mk0pE6otVotn332mYxQiwIlJ5LpZx06dIg7d+7Qtm1bk/6tpZtM+/r6mjS7MbeQZFoIEyiKOgI9acSLz3fqDa/6wPJZMOB/6o6MLTuDjW3OxmkESaaNExUVZUisx48fnyN9SjKtCg4OZuvWrYbHX3zxhSTUosDIzmT63Llz1KxZE1B3ULS2tjacO3DggGFCcGak+x1SrVq1Mt2wECKf0Gig8qtqOcezSpZVtzD/52/4bRNcj4RZX8Dm5bD9V/PEKkyi0+k4ffo0v//+O/v37ycwMNDcIRU4Pj4+qVYWkFU+hMgaz84BadCgQapzw4cPN6ntdD/uLlq0yHD/woULXLp0CZ1OZzjWpUsXkzoXQuQh3QbCLn9I1kHwYWjaTv157gRYWKjXxN9Xf+7bDC07PV015N4d2LAYuvRPvZKIMLvZs2cTEhJCcHAwFy5cwMHBgfj4eIYOHUqfPn3MHV6B9OxEquDgYB4/fky3bt3MGJEQed+zhRj/LcowdQK0Ud8djRw5klWrVvHqq69i8e8fTY1GI8m0EAVJBTcY8jk8uKfWSDd7He7fgbC/QaeHInbw8AG4VFQnKm7+Bfr9+2n/wA44HACvVH66MojIFYYPH06LFi2YPn067u7ulCpViooVKzJ16lRzh1ZglS1bljfeeIOkpCT27t3L+fPn+eWXX2jTpo1Rm1IIIZ6neWaivOY/k+b/+zijjEqmt2zZQlhYGIULFzapMyFEPmDnAC06qffr+cHfp8GjNtTwhoWT4d3R8Os8+HOPmmDXbQbH/y0XiAqH6Ksw4zN4owc0a2++1yEAOHr0KMOGDWPatGnMnj2bUqVKmfyHRZgupczSzs6ODRs2EB4ezvz58/nf//4nf4uFyISEhATDcs/P3k85Z4p0JyCm8PPzY9++fXl2mR6ZgChEDrt7C777GO7cBGtbePzvL6oKbmpy7f+z+nj4d1Az5+ZmyATEtC1fvpyxY8fSvXt31q5dy5UrV3K0f5mAmLYJEyag1+sNjz/77DPDWrlC5CfZOQHR1dU1zYECU5d7NiqZDgoKYvLkybRp0wYbGxvD8bxSTyfJtBBmkPBQrbHe+e/anYWLqtuW1/SFkL/UY226Qrf31E1ikpPVnRqzkSTT6YuPj2f8+PHMmzePWbNmMXDgwBwbpZZkOm2RkZEEBgZy+fJlQN3s5bPPPsuzA1xCpCWnl8bLKkYl0wMHDuTgwYN4eHikqplet25dtgeYFSSZFsJMEh/B6D6gtYAGr6mrfgA4u6o7KVauASMnw4/fqLXX3y4C2yLZFo4k08a5ePEiw4cP5+rVq5w+fTpH+pRk+uW2bt1q2PvB3t6ejz/+WBJqka/k1WTaqJrp/fv3ExoaKmtdCiEyxqYwDPtGvX/zxtPjVWqq565chkcP1VVBAFbMBt/GEHsNoiKg/VvqhEaRo6pWrcqOHTvYvn27uUMRz+jYsSPJycmcPn2a+/fvc+TIERo1amTusIQo8Iz6SFupUiWTlw0xB39/f7p3727uMIQo2Kq8qt5qNVZLPADca0P5yvAoHg4+s47usQMw/zvYuEzdYXHbKnNEXKAcPXo0zXNvvPEGCQkJnD9/PtvjyIt/Y8yhQ4cOhvsBAQGEhoaaMRohBBhZ5jF48GDOnj1Lp06dUtVMDxs2LFuDyypS5iFELqEo6uTEYiXU1T6WzYRC1pD0GL5boo5eP7yvnt+yAi6dgwEj1ee0+T+Tu5cyj+d1796dO3fu0KNHD+rVq0fp0qVJTEwkNDSU3bt3s3fvXmbOnImfn1+2xmFtbc3jx4+ztY/84vz58/j7+xset2nThvr165sxIiGyRk6Uedy8eZMSJUq89FhGGFW3kZSURNWqVblw4YLhmCydJITIMI1GTZRBHZ2u/KqaPFepCaXLqbcUTdvB36dg0RT1sZ0jXD4Hzd9QR7VFlli3bh1BQUEsWLCA7777jqioKIoUKYKnpyddu3bl0KFDFCmSfXXsIuOqVKmClZUVOp0ORVHYs2cPbm5uODnJhkhCvEzr1q05efLkS49lhFEj03mdjEwLkQc9SYKRPdRSkGfV9IXhEzPVpIxM514yMp05W7ZsISQkBGtra4YNGyZrUIs8LTtHppOSkkhMTKRJkyb8+eefhtKye/fu0bJlS5NKptKtmU6vlg7IsVo6IUQBZFUIOvZSa61bdobipdR1qs8Hp57MKEQB1qJFCwAeP37MzJkzpYZaiDRMmjQJR0dHzp49i4ODA46Ojjg6OuLh4UGvXr1MajvdkencUktnKhmZFiKPS/k1dSYIZn+t7p7YtB0UL5mhZmRkOmctXbqUAQMGsGnTJjp37pzutTIynXnx8fH4+/sTGRkJwNtvv021atXMHJUQGZcTNdPvv/8+8+bNy9I2X1rmkVJLt3///udq6fr3758naukkmRYin9Anw5i+6s6KllYwZ4M6gm0kSaZzTkREBD169EBRFMaMGSPJdA5YsGABN27cwMbGhjFjxpg7HCEyLKfWmdbr9dy4cQOdTmc4Vr58+Uy399IJiHXq1KFOnTqZ7kAIIbKM1gK69IfA3eokxKTHGUqmRdqycoa7Xq/n3XffZc6cOYwcOTKrQhQv0bdvX6ZMmUJiYiKrVq2iQ4cO2NvLIJIQz1q+fDkfffQRlpaWqTYijI2NzXSbsnWSECJvadACRk+Ft4dAETtzR5NvtG7d2qhjxpgxYwaNGjWiVq1a6V7j4uJiuBWAufDZzsbGBm9vbwAuX77MokWLzByRENnD1dWVatWq4e3tjbe3N2vXrjX6ud988w1BQUHcvn2buLg44uLiTEqkwcil8YQQQuRPKTPck5OTefDgQaoZ7g8fPsxwe2fPnmXDhg0cPHgw3etGjBjBiBEjDI+tra0z3Jd4XqdOnahatSrr1q0jPj6e+fPn06BBA7y8vMwdmhBZau3atYYPjxlRokSJLJ9TICPTQghRgGX1DPfAwEAiIiJwc3PD1dWVv/76i0GDBmX5hB+Rtho1auDrq+42GhMTw+bNmzl16pSZoxIid+jcuTOzZs0iNjaW+/fvG26mkHWmhRAFhkxATFt2zHAHaN68OZ988olMQDSD2NhYdu/eTXh4OM7Ozrz77rvmDkmIdGm1WsqVe7p513+/wUrh6uqKvb09iqJQt25dJk+eTMmSxq3upNWq48gpmw8qioJGozFp4mO6ZR7ffPNNuk/++uuvM92xEEKI3GPevHlZPsM9IwrAuE6OK1WqFD169GDixIlcu3aNbdu20aFDB3OHJUSaNBqNUQMeBw8epHz58jx58oQvv/ySvn37snPnTqP60Ov1XL9+ndDQUPz8/Hjy5Al6vd6kuNNNph88eABAVFQU+/bto2PHjmg0GrZu3WpYKF4IIUTelx0z3AH279+fBdGJzLK0tOStt95i7dq1nDx50rB3hKWlTJkSeVfKh3wrKys++eQTqlatavRzN2zYwIgRI9BqtYSHh3P+/Hk+++wzo5PxFzGqzKN169YsW7bMMPQeHR1Nv3792LNnT6Y7zklS5iGEACnzSE/lypXZuXOn2Tb7KFSoEElJSWbpuyAIDg5m69athsfvvfdeqq/ThcgNjFln+uHDhzx58gRHR0dAXRlo8+bNL530nKJWrVrs3buXli1bEhwcDEDNmjU5d+5cpuM2agLi9evXU/2jK1u2LNeuXct0p0IIIXKX7JjhLnIPLy+vVKPR27dv5+7du2aMSIjMiYmJwc/PD09PTzw8PDhw4AC//PKL0c+3sLDAyckp1bFChUzbr8Co73lcXFwYO3asYfLC4sWLcXFxMaljIYQQuUfKDPcePXpgY2NjOC6bfuQPWq2WL774gqSkJCZPnkx0dDQ//PADnTp1ytTyYkKYS6VKlQwjyplhZ2dHTEyMYQLivn37KF68uEkxGVXmcePGDYYNG8a+ffvQaDS0bNmSWbNmUaZMGZM6zylS5iGEACnzSE/KDHdQa6WzYoZ7RkiZR86Jiopiw4YNhpHpypUrZ2oZRCGyWk5sJ378+HEGDRpEWFgY7u7uhIeHs2PHDpM+VMrSeEKIAkOS6dxLkumcpdfrmTx5Mk+ePAHAzc2N7t27y8REYVY5kUyDuinV4cOHURSFhg0bGuqvMyvdZPrZyQov0rFjR5M6zymSTAshQJLpl4mOjiY0NJTmzZuj0+nQ6/Um1xIaS5LpnKfT6YiLi2PRokUoikKRIkUMqxwIYQ45lUynuHfvHlevXsXd3d2kdtJNpv38/NJ+okbD77//blLnOUWSaSEESDKdnvXr1zNy5Eg0Gg0RERGcOnXK5OWiMkKSafOJi4tj2bJlPHr0CFtbW0aPHm3ukEQBlRPJdNu2bVmzZg2WlpaGJLpPnz4v3VslPVLmIYQoMCSZTlt2LBeVEZJMm9fVq1dZsmQJAJ6enrz55ptmjkgURDmRTPv4+BAcHMy6des4dOgQ06ZNw9fXlzNnzmS6TaO+y9HpdEyfPp2hQ4cC8M8//+SZUWkhhBAvlx3LRYm845VXXqFLly4AnD59mvPnz5s5IiGyR8o8gYMHD9KqVSusrKxMnitgVDL94Ycf8vfff/PHH38A4OTkJF8DCSFEPpIdy0WJvMXDw4NOnToB4O/vz4EDB1JtLS9EfuDu7k67du3Yvn07r732Go8ePTK5TaNS8b/++ouQkBB8fHwAcHR0NGT2Qggh8r4pU6bQrl07wsLCaNy4MeHh4Wzfvt3cYYkc5u3tzZ9//smtW7fYv38/hw4d4tNPP5VJiSLfWLZsGbt378bLy4vChQtz7do1Jk2aZFKbRiXT2/kYXgAAIABJREFUzy7gD5CcnIxerzepYyGEELlH7dq1+eOPPzh8+DAADRs2xMHBIcf6LwDTd/KMDz/8kLCwMFatWsWTJ0/49ttvadOmDfXq1TN3aEKYzMbGhnr16hEaGkrFihUpXbo0JUuWNKlNoz5qenp6snLlSvR6PZcvX2bIkCE0b97cpI6FEELkHin1gz179uStt97ilVdekd0PC7BKlSoxbNgwihQpgqIo7N69mylTpjB9+nRzhyaESdavX0/9+vXp168fAOfOnaNz584mtWlUMj1jxgwCAwO5ceMGjRo1QqvVMnnyZJM6FkIIkXu89957jB49mpCQEC5cuGC4iYLLwcGBUaNG8dprrwGQmJhIfHy8YedEIfKiSZMmcfLkSYoVKwaAl5cXV65cMalNo8o8ihYtyoIFC1iwYIFJnQkhhMid7O3t+b//+z9zhyFyoSZNmhAVFcXFixcB+PHHH+nfvz/lypUzc2RCZFx2rFyUbjJ94MABmjVrluZOiLl9B0R/f3/8/f3NHYYQQuR6Xbt2ZcWKFbz11luyJJ54zjvvvMOhQ4cICAhAp9OxaNEiOnfujJeXl7lDEyJDsmPlonQ3bRk0aBALFy584U6IsgOiECKvkU1b0rZlyxZ69eplWCZKURQ0Gk2Obe1rZWUlq0TlATqdju+++87wuFGjRrRs2dKMEYn8JCc2bQkKCmLw4MGEhYXh7u5OeHg4O3bswNvbO9Ntpjsy3ahRIwB++uknatSokelOhBBC5G7Dhw9ny5Yt1K5dGwsLC3OHI3IpS0tLSpYsSVxcHABnz56VZFrkKXXq1DGsXKQoCg0bNsTR0dGkNtMdma5VqxYnTpzA19eXkydPmtSROcnItBACZGQ6PfXr1+evv/4yW/8yMp33fPvttyQnJ2NnZ8fDhw/x8/OjcePG5g5L5GHZPTKdnJzM559/zpQpU7K03ZdOQHz//fe5du0aI0aMeO7cjBkzsjQYIYQQ5tGxY0fmzp1L9+7dU+0tIMvjibS0bt2avXv38uDBA0CtPXV0dMTd3d3MkQnxYhYWFobdvLNSuiPTYWFh+Pv7M2vWLIYMGfLc+bFjx2Z5QNlBRqaFECAj0+l50Q53UjMtXkav13P+/Hm2bt1q+O+n0Wj49NNPZSKryLCcqJkeN24cVlZW9O/fn6JFixqOmzJwkG4ynWLFihX07t07052YmyTTQgiQZDo3k2Q6b7t27RqrVq0iISEBgJIlS9KrVy/5ZkNkSEaT6aVLlzJgwAA2bdpk9MYr2TFwYNSmLXk5kRZCCGG869evc/36dXOHIfIYZ2dnhg4diq2tLQBxcXEsX77czFGJ/CwiIoJFixZRv379DD1Pr9c/dzN1NNyoZFoIIUT+duHCBWrWrGm4eXh48Pfff5s7LJGHFC1alNGjR2NlZQXA7du30ev1Zo5K5Ed6vZ53332XOXPmYG1tneHnR0ZGsnLlSlatWsXVq1dNjkeSaSGEEAwdOpQvvviCO3fucOfOHb74//buPC7Kcn38+GeGHdlkUxAVUcFEAUERF1zSNLPFjqTmhllplsfK6mV1sqyOW8c4Zp2vPzuVmkuWey6Z+74HooAiiKDILpsIiDDz+4PTHDkqDgzMMHC9Xy9eMc/zzP1cT8HdxT3Xfd9/+xvTpk3T2/21qDgURuK1117TJDiLFi1i3759/Pvf/yY+Pt7AkYnGIiIigj59+hAUFFTj965du5Zu3bqxceNGNmzYQGBgIOvWrdMpHq2T6bt373LlyhWdbiaEEKJhysvLY+zYsZrXY8aMIS8vz4ARCWPl6OjI9OnTsbKyoqSkhKNHj5KWlsauXbsMHZpo4NRqNR4eHpqvB60aFxMTw8aNG/noo49qdY/PPvuMs2fPsnnzZjZv3syZM2eYM2eOTnFrlUwfPHiQtm3banZCPHPmDOPHj9fpxkIIIRoOExMT4uLiNK/j4uJqvXnLkCFD8PPzIyAggNDQUKKiouoqTGEkbGxsmDx5MpaWlri5uQGQn5/PggULKC0tNXB0oqFSKBSkpqZqvh60LPORI0dITk6mY8eOeHp6cvLkSaZMmcLSpUu1uoe1tTXt2rXTvPb09MTa2lq3uLVZzSMkJIQ1a9YQFham6RR9fX2JjY3V6eb6Iqt5CCFAVvOozu+//864cePw8/MD4MKFC6xZs4YhQ4bUuK38/HzNjmKbN29mzpw5REdHV/seU1NTysvLax64MAorV64kOTkZgC5duvDcc89havrIrS5EE1ObpfEGDBjAW2+9pfVqHrNnz8bExIRXXnkFtVrN8uXLqaio4J133gFqt0SeVj/JFRUVtG/fvsoxWT9SCCEaj6FDh3Lx4kVOnToFVA6iODs716qte7fmLSgoQKFQ1EmMwngNHz6c//u//0OtVhMTE0NMTAxt27Zl0qRJhg5NNDFz584FKss97vX555/Xeok8rZJpS0tLioqKNB3ihQsXNMvfCCGEaBxcXFx4+umn66StiRMnanYa27lz533nIyIiqtRDygTExs3Z2ZmPP/6YyMhItm3bBkBKSgoXLlyga9euBo5OGLODBw/W6Pr6WGFGqzKP3bt3M2fOHK5cucITTzzB3r17Wbt2LY8//nidB1QfpMxDCAFS5lGdw4cP8+6775KYmEh5eTlqtRqFQkFhYaFO7a5cuZKff/75gQn1vaTMo+koLi7mwoULmgmJkydPpnXr1gaOSjQE+tgBsT5olUwDXL16lV27dqFWqxk6dOh9ZR8NmSTTQgiQZLo6Pj4+zJ07l+Dg4CoTD1u1aqVz21ZWVqSmpuLk5PTQaySZblpUKhXff/89aWlp2NraMnPmTPLz87l8+TLBwcGGDk8YSKNPpo2ZJNNCCJBkujo9evTgzJkzOreTn59PcXEx7u7uAGzZsoXp06dz/fr1amunJZlumiIiIrh161aVY+PGjaNDhw4GikgYkrEm09XWTHfr1q3azi8yMrLOAxJCCKF/I0eOZNWqVYwePVqnCeYFBQW88MILlJSUoFQqcXFxYfv27TIJUTxQaGjofSVACQkJkkyLepOTk3Pf5OoHHauJakemDx06VO2b+/fvX+sb65OMTAshQEamq7N161bGjx9PcXExgKZmWl+jRDIy3TSpVCrWrl2LQqEgMTFRc9zV1ZVXX31Vls9rYvQxMh0YGHjfYPCDjtVEtT+l/5ssp6WlAWg+vhNCCNE4vP3222zdupXu3bvXerMWIWpKqVRqNoE7cuQIR44coby8nKysLE6cOEFoaCi//fYbrVu3pkuXLgaOVhizsrIySktLqaio4NatW5oVhAoKCrh9+7ZObWv1J9/FixcJCwvTJNMeHh6sX7+eTp066XRzIYQQDYOrq6tBV2hqAtN3xCOEhoYSGhrKpUuX+Pnnn9m/fz+XL18mNTWV06dP4+HhUWUNcyFqYv78+Xz66acoFArs7e01x+3s7DQbttSWVhMQBw4cyKuvvsrYsWMBWLduHcuWLdOsIdrQSZmHEAKkzKM68+bNw87OjlGjRmFpaak5XpvdwGrDWCceibqnUqn45ptvyMvLu+/ciBEj8Pf3N0BUQh/00Q9MmzZN663HtaVVMh0QEMC5c+ceeayhkmRaCAGSTFdHqVRqvlcoFHqvmZZkWtxLpVKxYsUKrl+/ft+5li1bMnXqVANEJeqbvvoBlUpFRkZGlXkabdq0qXV7ykdfUvlwcXFxmtdxcXFSUyeEEI2ISqXSfFVUVGj+KYQhKJVKJk+ezFNPPYW1tXWV1WAyMjJYsmSJZrKsEDWxcuVKHBwc6NKlC0FBQQQFBdG9e3ed2tRqZPr3339n3Lhx+Pn5oVariYmJYc2aNQwZMkSnm+uLjEwLIUBGphsyGZkWj5Kdnc2qVas061I7ODgwatQo3NzcDByZqCv66Afat2/Pzp078fHxqbM2td60JTs7m1OnTgEQEhKi03p8+ibJtBACJJluyCSZFtpQqVRERERUWX3B2dmZsWPH0rx5cwNGJuqCPvqBnj17avLZuqJVmQdASUkJ+fn5FBQUUFJSUqdBCCGEEEI8ilKp5N1336VXr16aYzk5OSxZsoSNGzcaMDJhLEaMGMHixYvJysqisLBQ86ULrUam165dy1//+lf69++PWq3m6NGjfP3114wZM0anm+uLjEwLIUBGphsyGZkWNaVSqfjtt9+IiYmhtLQUAB8fH4YNG1Zl6TNhPPTRD9THZGutkulOnTrx22+/0a5dOwCSk5N58sknuXTpUq1vrE+STAshQJLp6mzbto3Q0FDNOr55eXkcP36c4cOH6+X+kkwLXVy7do0VK1Zo1isfNmwYwcHBBo5K1JSx9gNalXlYW1trEmkAT09PrK2t6y0oIYQQ+jV79uwqG2I4ODgwe/ZsA0YkhPbatGnD9OnT6dq1KwC7du0iNjYWlUpl4MhEQ5Sens7BgwcBKC8vp6ysTKf2tEqmhw8fzpw5c0hNTeX69et89tlnPPPMM3VSZyKEEKLh0eca00LUBUdHR/7yl7/g7++PWq1mw4YNLFy4kMzMTEOHJhqQDRs2EBISwqRJkwCIjY1lxIgROrWpVZnHvfUl9zVgBB2ulHkIIUDKPKoTGhrKwoUL6d27NwDHjh1j1qxZHD16VC/3N9aPd0XDdPr0aXbv3q35mfrggw8wNzc3cFTiUfTRDwQFBbF7924GDx5MVFQUAL6+vsTGxta6TVNtLpKPSYQQonH74osveP755+nUqRMACQkJbN682cBRCVE7wcHBREVFkZGRAcCOHTt4/vnnDRyVaAhMTExwcnKqckzXP7S0SqaFEEI0br169eLixYucOHECgN69e1epoRbC2IwaNYpffvmFjIwMzp8/z4ULFwgLC6Nz586GDk3oaMiQIWRkZKBUKrG1tWXJkiV069ZNq/fa2tqSmZmp2VVz3759ODo66hRPtWUe/fv359ChQzRv3rzKVp5/LiOSm5ur0831Rco8hBAgZR4Pcvv2bZo1a/bQ+S92dvrpN6XMQ9SX1atXc+XKFQDatm2Lk5MTgwYNkoUUGiBt+4H8/HzNH/ubN29mzpw5REdHa3WPs2fPMmXKFJKSkujSpQtXr15l+/btWifjD1LtyPS6desAOHfuXK1vIIQQouEKDQ0lMjISBweHBw6aSIIrjN2YMWM4cOAAx48fJyUlhZSUFK5evcqMGTMMHZqopXs/NSsoKKjSdz1K9+7dNT8PUPkpnK7rkmu9nbgxk5FpIQTIyHR1srOzcXFxeeSx+iIj06K+zZs3j7t372peKxQKnJyceOONNwwYlbiXUqnE3d1d83rmzJnMnDnzgddOnDiRAwcOALBz507NsoiPcvjwYd59910SExMpLy/XHNdldbpqk+l27dpVm+0nJSXV+sb6JMm0EAIkma5OYGAgkZGRjzxWXySZFvUtKytLk7f8/vvvmuPu7u6MGjVKdk1sAGrTD6xcuZKff/6ZnTt3anW9j48Pc+fOJTg4GBMTE83xVq1a1ei+96q2zGP79u1AZblHcnIyU6dOBeDf//43bdu2rfVNjcHVWxn8kZPA6ex4XCzteKdrGEqFVstyCyGE0SgrK6O0tJSKigpu3bql2UGuoKCA27dvGzg6IeqOq6srrq6uQOUktLi4OOLi4khLS+Obb77h6aefxtXVFTc3NwNHKmoiPDyc1157jZs3b963SseD2NnZERYWVqcxVJtM+/r6ApU7CZ05c0ZzvE+fPgQHB/PZZ5/VaTB1bf369axfv75W7335yJfcVf33ryNrU0tef+yZakfqVWoVd1XlWJjIWpZCCOMwf/58Pv30UxQKRZWROTs7O9555x0DRiZE/fH19cXX15dFixZx+/ZtysvL2bJlC1D5CZaLiwsDBgzQ2wRcob38/HyKi4s15SBbtmzByclJ6xU5Ro4cyapVqxg9enSdrT2uVc20t7c3UVFRNGvWDICioiICAwO5fPlynQRR32pa5pF8K5MJhxYCMK/7ZNZe2U9MXjJjvAZUm1D/88JGNqUc47ehc7Exs6qr8IUQdUTKPB5u2rRpLF261GD3lzIPYQgqlQqVSsXBgwe5fPkyN2/e1Oyt4ezsLPXUeqZNP5CSksILL7xASUkJSqUSFxcXFi1aREBAgFb32Lp1K+PHj6e4uBiom8nWWq0zPXbsWEJCQhg1ahRQOeI7fvz4Wt+0oYu8mQDAwh6v0LtFZwKdOvDe6X+zLukgOaUFTO/8HE6W9yfmm1KOAbD2ygGmdHpKrzELIYQuli5dSnp6OvHx8QwYMIDy8nJUKpXsGicaNaVSiVKpZPDgwQwePJgrV66wbt06ysvLycnJITMzkxYtWhg6THGPtm3bcvr06Vq//+2332br1q107969Ss20LrRezWPnzp3s27cPgMGDBzNs2LA6CUAfajoyvejCBramHGfToI9xsapcfqW4/A6fRa3mWGYspgoTBrj58bxnX/wc22ne9+L+eaQW5wDQyb41S/vMwFRZN/+hhBC6k5Hph9u4cSMzZ85EoVCQnJxMdHQ0H3zwgdaTenQlI9OiIdmzZ49m6TQbGxv69OmDs7MzHTp0MHBkjZs++oGQkBBOnjxZp23K0nj/47v431iZsAdXSwc2DJp937qrxzJjWX/1MJE3EwEY6dmX6Z2fw1RpwvDfPwKg8G7lRwed7FszyqsfA9z8MVPKZpNCGJok0w8XFBTE7t27GTx4MFFRUUBlXWlsbKxe7i/JtGhIVCoV69ev59KlS1WO29ra8tRTT9GpUycDRda46aMfmDdvHnZ2dowaNQpLS0vNcV3q4yWZvsel/Ou8evSfAHzgP4anWgc/9NrkW5l8eWED53KvaBLqgTvfY4CbP7P8RrEg+meOZcZSrq78ofj1ic9obmFTdw8lhKgxSaYfLjg4mNOnT9OtWzdNMn3v9/VNkmnRUJ08eZLY2NgqfYeXlxd9+/alXbt21bxT1JQ++gGl8v6V2XStmZa13u5xPrdy/cl/hrxWbSIN4Gnbgn+GvEaX5p5sTj7GHzmVddbNzW2wMbPi790nsfmJTzTXP7vnY948YbjJPUIIUR1bW1syMzM1n8bt27dP69nx9yotLWXEiBF4e3vj7+/PE088QWJiYl2HK4TehISE8PLLLxMYGKg5lpSUxKpVq9i0aROZmZkGjE7U1J+TTu/90jWBl2T6HnllRQC0sGyu1fWmShPe7vIXABae/xkAB/NmmvMO5jas6PcuzhaVI+KRNxMI3T6TEXvmUFCm/fqtarVas+ze2ZzLhG6fybJLO7hSmAbA7bul7Eo9Q/TNJGac+Be7U/+gQq3Sun0hhFi4cCHDhg0jKSmJvn37MnHiRL788statTVlyhTi4+OJjo7mueee45VXXqnjaIXQv2eeeYbZs2czZMgQOnbsiFqt5sKFCyxbtozTp0/z66+/3lcWIhqutLQ00tLS6qQtrco8tm3bRv/+/bGzs2PRokWcPHmSOXPm0KVLlzoJor5pW+bxVcxmNiQfYfPgT3C21H4npNl/rORgejQA7/uPYfgDRrWnH/+G6Nz7d4zs7dqZmV1H4mDeDHOlGTfv3CL3TiGlFWVczL/ON3FbtY7jfw1088fd2gkHcxtGefUj6VYGXrYtZfMZ0WRJmUf1CgoKOH78OGq1mt69e+Pg4KBzm2fPniUsLIzk5ORqr5MyD2Fs4uPjOXPmDFeuXKlyfPr06VptHiLup49+4OLFi4SFhWkSaQ8PD9avX69THbxWybSfnx/nz58nOjqa8PBwpk2bxurVqzly5Eitb6xP2ibTC6LXseP6aXYNnUczM8tqr71XZE4Cb56sLOHYO2zBQzdtuVaUxZnseBbHbtY++DrWytqJoR7d6deyK162btVuQiNEYyPJdPVUKhUZGRmUl5drjrVp00anNidMmICjoyNfffVVleMRERFERERoXqelpWnW9xXCmPz4449cv34dW1tb8vLy6NSpE6WlpSQnJ+Pl5YWVlRWPPfaYZiM88XD6SKYHDhzIq6++ytixY4HKXb6XLVvGgQMHat2mVsl0YGAgkZGR/OMf/6BZs2a8/vrrmmPGQNtk+rPI1exJi2T/U1/UaPUNtVrNioTdBDp1xN/JS6v33CorZsqxr0i9nf3A8xZKM1ws7Xm6TQh+ju3waOZCRkkubW1aYG1qQVrxTUwUSlwtK0eOFAoF+WVFmKAkr6yI5KJMjmfGcjo7nuzSgofGMbHDYLztPcgvK+JJjx5YmJhp/dxCGBtJph9uxYoVzJgxAzMzM80EHYVCQVZWVq3bnDdvHtu2bWPfvn1YW1tXe62MTAtjFx0drdlF8X9ZWloya9YsPUdkfPTRDwQEBHDu3LlHHqsJrTLGiooKTp06xcaNG1m+fDkAd+/erfVNG6o/64xNalgGoVAoeMl7aI3eY2tuzU8DPwAqtyFXKpSo1CoyS/Jxs37wpJ97VwNxt77/IyQHcxtN221sXOnXsmuV81cK0ziccYEfLv+uOfZj4l7N94subABgRucRPN2mJ1amFjV6JiGE8fr88885c+YMPj4+ddLeokWL2LRpE3v37n1kIi1EY+Dr68uJEydQKpX4+PhoNkGCyom5WVlZuLq6GjhKYWJiQlxcHJ07dwYgLi5O581btEqm//73vzN16lQGDRrEY489Rnx8PN7e3jrduCGqUFegRKH3muI/76dUKB+aSNeF9nbutLdzp6tjO27fLcXPsR3br5/i20tVN2VYEreFJXFbeKp1MIPcu9HD2VvKQYRo5JydnesskY6IiOCnn35i7969dVJ3LYQxMDU15bXXXtO8LioqIjExERMTE8rKyli6dClKpRI3NzcGDx6Mp6en4YJtwubNm0e/fv3w8/MD4MKFC6xZs0anNmWd6Xt8cOZ7TmZd4sDwf+gpsoYhuyQfO/NmXL+dxbJLOzmZdbHKeScLO15oF4q3vQddHdth+ZCacCEaOinzeLj58+djZWXF2LFjddrIIDU1ldatW+Pl5YWtrS0AFhYWnDp1qtr3SZmHaKwKCgpYvHgxCoWCP1MupVLJ008/zbFjx/D29mbIkCEGjrJh0Fc/kJ2dremTQkJCcHZ21qk9rZLp4uJiVq5cSUJCQpWJKUuWLNHp5vqibTL93ul/E5WTyN6nFuopsobpq5jN7LkRybt+YSy/vJukW+mac0oUfBH8Kk6WtnSwa2XAKIWoOUmmH64+NjKoCUmmRWNWVFSEtbU1ly5dYuPGjfdNtn322Wfx9/d/4O9hU2Ks/YBWyfSTTz6JmZkZPXr0qFJX8re//a1eg6sr2ibTM08tIzYvmd+fnK+nyBq+W2XFpBXfJK+siPdO/7vKufb/WQ1kQofBPO4eYKAIhdCeJNMNl7H+T1SImlKpVKxdu5bi4mKysrI0P/fu7u4MHDiQPXv2MGHCBGxsmt6uyfroBw4fPsy7775LYmIi5eXlqNVqFAoFhYWFtW5Tq2S6c+fOxMXF1fomhqZtMv3miaUkFKayc+hcPUVmXMoqyvk2fgdnsy9z5Z7RanvzZjzftg/93bpibWKJq5UDpkrdivmFqA+STD/ctWvX7jvm4OBQ4zKP2pJkWjRF+/fvf+Ayw76+vrRu3ZoePXo0qdFqffQDPj4+zJ07l+Dg4CoDxK1a1f7Tdq0mIHbq1ImcnByda0oMKftOIU7NbKqdXFihrsBEIUngw5ibmDK983MAXMq/TnMLGy7kXuXLCxtYkbCbFQm7gcqNaNytnejm3IEOdu4PXHlECNGwBAUFkZubi5lZ5fKYd+/excbGBg8PD9asWUNAgHz6JERdCwkJ4ciRI1XqqQFiY2OJjY3lzp079OvXz4ARNj52dnaEhYXVaZtajUxfvHiRZ599lh49elSZmPLDDz/UaTD1xdnOms5rX+NJjx58GPDiQ6+bdmwJ6cW5bHlijv6CawTKVRXMi/6JPTcevO54b9fOuFk78lTrYLztPfQcnRD/JSPTD/f+++/TqVMnwsPDUavVrF69mpiYGPr06cM//vEPjh49Wq/3l5Fp0VQlJSVhb2/P1atX2b9/PyUlJZpz5ubmODg48OKLLzaJlXH00Q8sWLCAVq1aMXr0aMzN62ZBBa2S6b59++Ll5UX37t2rDIm/8cYbdRJEfbNwtiV4xasAfB4UzgA3/wdeN+XoYm6WFrJx8Mf6DK9RKKsop/BuMeZKE87lJhGVk8iJrDiaW9gSk5esue65tr35a+fnZHMYYRCSTD9ct27diIqKqnLsz825unbtyoULF+r1/pJMC1Fp48aNxMTEVDnm6enJiBEjOH78OIMGDaqzJLCh0Uc/sHXrVsaPH09xcTGApmZal/tqlUz7+voSGxtb65sYmoWzLYf/OMjn8VsoulvCADd/7M2s+avviCq1vS8fieDW3WJ+efwjA0bb+BSX32FJ7BZ2XK9chsZcacrznn1QqVW80K4/9ubNUKlVHM2MYUirIL2v8y2aDkmmH65z585s3bqVjh07ApCQkMBzzz1HXFyczruDaUOSaSEqqVQqbty4wdGjR7l8+bLmuFKpRKVSYW9vT7NmzejevTvdunUzYKR1Tx/9gJeXF9999919A8TNmjWrdZta1Uz7+/tz48YNnYqzDa2TXSv+1Xs6fzu7nH1plaMvCoUCM6UpUzsNx1RpQoVKaqbrg7WpBe/7jya84xMsid3C0cwYfk46BMD6q0ewNbPCTGlK7p1bmCpMGOTeTTaJEULP5s+fT69evfD3r/zk7vz583z33XcUFRUxevRoA0cnRNOhVCpp3bo1I0eO5Pz58yQmJhIfH49KpUKhUFBQUEBBQQG//vorhw4dwsnJiQkTJhg6bL0pLS1lzJgxxMXFYWVlhaurK0uXLqVDhw5avd/V1ZXHH3+8TmPSamT6iSee4OzZs/Tq1atKzfSmTZvqNJj6YuFsS1ZCAvbNW1KhVnEgLZpPo1Zpzn/gP4aeLp146+RS1KhZPeB9A0bbuJWrKrhWlIUaHtGkAAAgAElEQVQaNfvSznEp/xqXC29QUHa7ynUBju2Z+thwujT3NEygolGSkenqZWdnc/LkSaByYpSLi4ve7i0j00I8WHl5OVFRUXh4eFBeXs727dtxd3ev8mmRl5cXffv2pV27dgaMVHfa9AOlpaXs37+fYcOGoVAo+Oabb9iwYQMHDx7U6h7z5s3Dzs6OUaNG6bRB1b20SqZXrlz5wOPh4eG1vrE+3ZtMQ2VCN3Dne1WuMVeaUqYqp5N9a/4d+rYhwmyybt8t5Zerh/gl6RBF5aWa4zZmVmx4fDaLYzfTupkzEzs+QdHdEmzMrAwYrTBmkkw3XJJMC1EzOTk5ZGRksGnTJs1KIB06dODOnTvcuXOHadOmGTjCmqtNP3D27FnCwsJITk7W6vp7lxr8cxWVeq+Zrqio4MMPP2ThQuPdFfB/k2mA87lJWCjN2H79FFtSjmuOj/EawBudnzVAlALgUPp5PvpjRbXXfBQwll6uj2FnXvv6JtE0STL9cFlZWXzyySdER0dTWvrfP2ojIx+8Sk9dk2RaiNrJzMzkjz/+IDIyssrvUGBgIKmpqdjZ2TFu3DgDRqg9pVKJu7u75vXMmTOZOXNmte+ZMGECjo6OfPXVV/Ud3kNpNTIdHBzM6dOn9RFPvXhQMv0ntVrNrbvFnMy6REnFHYa37ikbjhiYSq0iu7SA5Zd/59bdEspU5ZzMuljlGjcrR35+/G8oFAqKy0upUKuxlRFr8QiSTD/cM888Q9++ffn+++/58ssvWbZsGd26dePzzz/Xy/0lmRZCN6mpqXz//fcPPBceHo69vT23bt2iTZs2eo5MezXtB+bNm8e2bdvYt28f1tbW9RhZ9bRKpufMmYOZmRkvvfRSle0t9bUzlq6qS6aFcVCpVWy4eoSv47Zqjr3s/SQOFjYsvbiNllbN+bLnazhbGsfPpDAMSaYf7s8VO/5cBq+srIz+/ftz4sQJvdxfkmkhdHflyhXu3LnD1q1bKSsr0/R5zs7O3Lx5E7Vaja+vL0VFRUycOLHB7a5Yk35g0aJFrFu3jr179xp8DW6tkun6qC/RJ0mmG4+iuyV8eWEDe9OiHnh+ZpeR+DlWTsBob+f+wGtE0yXJ9MP9+Qlkjx492LVrF82bN8fHx4eEhAS93F+SaSHqTmFhISqVChsbG+bNm8eDUj13d3deffVVA0T3cNr2AxEREaxZs4a9e/fSvHlzPURWPa2SaWMnyXTjU1B2m0+jVqNEwZj2A3j75P+rct5EoWRR8BS6u3gbKELREEky/XDjx4/nq6++YvXq1Xz99dfY2dnh7e3NunXr9HJ/SaaFqB/Hjx/n/PnztGrVSrNFuampKeXl5bRr147x48ejVCq5dOkS165dY8iQIQaLVZt+IDU1ldatW+Pl5YWtrS0AFhYWnDp1Sh8hPpAk06JRWJW4l9i8FJIK07l5p5AyVTlQOVL9vGcfCstuM/uPlUzpNBzf5m0NHK0wFEmmtXPs2DHy8vIYNmxYlU0N6pMk00LUv+LiYoqLi1GpVHz77bea3zkfHx/i4+OByvrqP+uq9V0Goo9+YNu2bYSGhmpKQ/Ly8jh+/DjDhw+vdZuSTItGpVxVQbm6gl2pZ/nywgYA2jRz5drtLKBy4uIvg2SHy6ZKkun7PWqmfEREhF7ikGRaCP0qKiril19+ITU1tUoZiJeXF+Xl5Vy/fp0ePXowbNgwvcWkj37gf3d0VavVBAUF6bRyUcOqPBdCR6ZKEyxNzBnRtjcr+r0LoEmkAdJLcnlx/zxOZ1f+Bb788u+MP7iQ/LKiB9aUCdHYLV68mGPHjmFra4u9vf19X0KIxsnGxobJkyfz7LOVywH/ORqdlJTEtWvXUKvVnD59mqSkJEOGWe/qYg6gVtuJC2GM2tu5M6RVEPEFqViamBFfUDkimVqcw3unvmVO4ER+uPw7AM/s/pi+LXwZ0iqIge4BhgxbCL3at28fP/zwA2vXrmXUqFFMnjyZ9u3bGzosIYSeBAQE4Ofnh1Kp5LvvvuPGjRsAtGrVihs3bnDgwAGcnZ354Ycf8PT0ZMSIEQaOWDe2trYcP36c3r17A2gGE3QhZR6i0VOr1VSoVZSU30GpUPJJ5I+cyr700Ov7tezKKz7DaGcrPy+NjZR5PFxhYSE//fQTy5cvx8rKigULFtCzZ0+93V/KPIQwPJVKxcGDByksLOTZZ59l7ty5qFQqzMzMuHv3LgBWVla0bNmSFi1a4OXlRceOHevs/vroB06cOMHzzz9Pp06dAEhISGDz5s0EBwfXuk1JpkWTk19WxOdRazSlHg8z2L0bPg6tCXLqSBsbFyxMzPUUoagvkkxXLyMjg+XLl7NkyRIWLFhAeHi43u4tybQQDc+uXbs0q2TY2NhQUVFBSUlJlWv69evHwIED6+R++uoH8vLyNGvo9+7dW+d1qiWZFk1WuaqCHxP2EOL6GJYm5jQzs+Tfl37j9xtn77vWXGnKJ93G42XnRitrZxQKhQEiFrqSZPp+FRUV/Prrr3z//fekpKQwYcIEJkyYgJubm17jkGRaiIZJpVJx48YN3NzcMDU1pbS0lLi4ONLS0vjjjz8AsLS0xM3NTbPMXm3VZz9w+/ZtmjVrRmFh4QPP67IRoSTTQtyjXFXBzTuFLDq/nlt3S7hRfBMbMytSb2drrunXsiufB4WjVMj8XWMjyfT9WrZsSZs2bXjppZfo06fPfef9/Pz0Eock00IYnwMHDnD48OEqx5RKJSNHjqRz5841bq8++4HAwEAiIyNRKpVVBsTqYiNCSaaF0ELyrUz2pkUSl5fCmZzLtGnmioNFM171eYoAJ5msZSwkmb6fp6en5n8sf+5w+yeFQqG3mfySTAthnE6dOoWlpSX79u2jtLSUu3fvolQqefnll2nZsmWNRqr10Q9kZ2fj4uLyyGM1Icm0EDVwp6KMeefWsT/9v2tU/jPkNbo7y06LxkCS6YZLkmkhGodNmzZx4cIFAKytrXnvvfe0fq8++oE/R6gfdawmZGk8IWrAwsScT4MmMjZ/IK8c/ScAKy7vJqM4l472HvjYexg4QiGEEMJw/vKXv2BqakpKSgqOjo6GDkejrKyM0tJSKioquHXrluZTuIKCAm7fvq1T25JMC1EL7e3cCXTqQOTNRKJzk4jOTcLL1o13uo7E2cIe92ZOhg5RCCGEMIg/N4JpSObPn8+nn36KQqGosiGVnZ0d77zzjk5tS5mHEDpIL85l/MEFlKnKqxzfPuRzUooy8XP0MlBk4kGkzKP+zZgxg19//ZWUlBSioqIICNBuEyQp8xBC6KMfmDZtGkuXLq3TNmU5AiF04GbtyMr+7xHaokuV40/vns0bx7/hYHq0bFMumpSwsDCOHj1K27ZtDR2KEELcZ+nSpaSnp3Pw4EEAysvLKSsr06lNSaaF0JFHMxcedw/AQmnG424BeNq00Jyb/cdKXj36T+Lzr/NL0iFu3M7hYv41UooyDRixEPWnX79+eHjI3AEhRMO0ceNGQkJCmDRpEgCxsbE6b5EuNdNC1IHBrQIZ3CoQgFtlxUTlXuGrmM1kleYTX5Cqmaz4ddxWAGzNrNg+5HNZq1o0WREREURERGheyyc4Qgh9mDdvHpGRkQwePBgAf39/UlJSdGpTkmkh6pituTX9WnalhaUDyxN24+/oxY3im5grTVh/9QgAt+6WcDYngWAXHwNHK4RhzJw5k5kzZ2pem5iYGDAaIURTYWJigpNT1UUCzM3NdWpTkmkh6omPQ2sW9Hi5yrEAx/bculvCwvO/8MkfK3GzdqKX62NcLkhlUKtAWlk70dWxnYEiFkIIIRo3W1tbMjMzNZtV7du3T+cl/CSZFkKP+rlVbs2cXpLL6sR9JBTeIKHwBgAnsy8BMKnjEBwtbHne8/6tnYUQQghRewsXLmTYsGEkJSXRt29frl69yo4dO3RqU5bGE8JAbpYWUlJxhwu5yZzMvsj+tHNVzgc5d8Td2ok3HnuWP24mkFGcy/DWPWlmZqmpL1VR+U8Tqb3WiiyNV/+mTp3Kjh07yMjIwMnJCVtbWxITEx/5PlkaTwihTT9Q2+U371VQUMDx48dRq9X07t0bBweH2oYMSDItRINQVlHO0cwYiu6WUHD3Nr+mnCCjJA+AFlbNyfzP92/6jmBE2z58/MdKbt4pxNO2JbF5yazqP0vzkZV4OEmmGy5JpoUQ2vQDhw8fxsvLi759+7Jly5ZaJdMqlYqMjAzKy/+7R0SbNm1q3M6fpMxDiAbA3MSUx93/2yGMaNuHu6pyFkT/zImsOJws7Lh5p5D4glTmR6/jSGYMAJfyr6NCTUpRFp62LR7WvBBCCNEo9OvXT6f3r1ixghkzZmBmZoZSWfmprkKhICsrq9ZtymfDQjRAtmZWOFrY8oH/GF70Gsj/9fkrNmZW7Eo9y+4bf2Bjagn8t8zjfG4SdyruGjJkIYQQQidqtRoPDw/N173LZ9aVzz//nDNnznDz5k2ys7PJzs7WKZEGGZkWokFrbmHD652fAcDH3oOonEQm+zzJuPaPM3LfZ+TeuQXAPy6s58sLG1ChJtjFhwU9XmbpxW1E3bzCd6EzpaZaCCFEg6dQKOq9FM/Z2Rkfn7pdllaSaSGMxEcB4ygpv0NrGxcAXuv0NNduZ7E6cR8ALaybk16cy+nseJ7f8ykFd28DcDA9mr4tumBhYsaZ7Hg62LWiuYWNwZ5DCCGEMJQRI0awePFixo4di6Wlpea4nZ1drduUCYhCGLnfU89yMf8a0zs/x++pZ1kcu5nSirIq1wQ6dWR652eZfORLRrTtzTtdwwwUrWHJBMSGSyYgCiFq0g94enrWagLin3XS91IoFDr1P5JMC9HIxBekEpeXQoBTeyYe+uK+862buaBSq3ihXT9Gtgs1QISGI8l0wyXJtBBCm36gtstv1icp8xCikfGx98DH3oN7/052tXQgqzQfgOu3swE4mH6+ySXTQgghjNuyZct0ev+1a9fuO+bg4KBTmYfMShKikbp33elXOw277/y53Cu8uH8ePycdAqBcVUET+KBKCCFEExYUFES7du3w9vbG29ubdu3a0bp1a3x9fTl37tyjG3gAGZkWohFbEvI60blJDGkVRO6dWygVSv4V96vmfGpxDjuun+JJj+5MPPQFT7QKpJtTB+zNm9GluafhAhdCCCHqwcsvv0ynTp0IDw9HrVazevVqYmJi6NOnD9OnT+fo0aM1blNqpoVoQgrLbjNq/1za2LhyMf+/H3U97h7A/rRzmCiUVKhVADzXtjc3bufwcbfxjWb1D6mZbrikZloIoY9+oFu3bkRFRVU5FhgYSGRkJF27duXChQs1blPKPIRoQuzMm7Fp8Mcs6PFyleP7085ha2alSaQBtqYc52zOZdYlHdAcLy6/w4G0c1IOIoQQwijduXOHhIQEzeuEhARKS0uBymS+NqTMQ4gmxtrUEmtTS34a+AGWJuZMPPQF9mbN+Hv3SfyWegZ/x/Y4mDdjx/VTHMuMY+2VA2y4eoRpjz1D3p1b/Ji4l3+GvEbrZi7sTztHWLtQzJTSlQghhGj45s+fT69evfD39wfg/PnzfPfddxQVFTF69OhatSllHkI0cbfulmBlYo6p8v6/yM9mX+a7+N/IvXOL9JJcrE0tKC6/wyD3buxLq/yYbG73l+jXsisl5XewMrXQd/g1ImUeDZeUeQgh9NUPZGdnc/LkSQBCQkJwcXHRqT1JpoUQj5RenMuLB+ZVKQP509j2A3nMoQ1zIlfxUcA4DqZHM8N3BK5WDgaItHqSTDdckkwLIYy1H5DPZoUQj+Rm7cgAN3/NaDTAYw5tSCnKJDYvhfiCVCrUKuZFr+WuqgJLE3M+6jbWgBELIYQQ98vKyuKTTz4hOjpaUysNEBkZWes2jWoCYm5uLkFBQdjYNI6VBYQwJm889gxTOw1nXPvHAXihXSiPObQhOjeJP3IqJ3PcVVWOKOy+8QdXCtM0700pyiT80D+4eitD/4ELIYQQ//Hyyy/j6elJTk4On376Ke7u7gwfPlynNo0qmba1tWXPnj2EhIQYOhQhmhwXKwfGdxjEZO8n+Vfvv/JEq6Aqa1F72rQAoG8LX9So+SbuV1T/KQvZmnKCpFvpHM2MASDvzi29xy+EEEJcv36dWbNmYWFhwTPPPMOmTZvYu3evTm0aVZmHmZkZjo6Ohg5DiCbN3MQUP8d2ADzduic5pQX0dHmMdrYt+TpuCzO7jMTevBk7rp/m3VPf8lTrYA6mRwNwpTCdC7lXef341zzp0YP3/UdjojCqv+mFEEIYMXNzcwAsLS25efMmzZs3JycnR6c26/3/YjNmzMDT0xOFQnHfNo0JCQn07t0bb29vevToQWxsbH2HI4SoQy2tHXnffwwD3f3xtG3Blz2n4mLlwNtd/kKgUwfO5Fzms6g1ZJcWAHClMI0z2fEA7Eo9w/60qOqaF0IIIeqUt7c3N2/eZPz48fTs2ZPu3bsTFBSkU5v1nkyHhYVx9OhR2rZte9+5qVOnMmXKFC5fvsysWbOYNGkSAHFxcQwYMKDK14IFC7S+Z0REBB4eHpovIYR+WZiYszhkGh93G4eaygWD3KwduX47m6ibVzTXxeQmA5Bdkk/yrUxDhCqEEKIJWb16NU5OTrz55pusXLmSzz77jDVr1ujUpt6WxvP09GTLli0EBAQAlbMpO3ToQG5uLqampqjVatzc3Dh69CgdOnSotq3BgwfXqL5FlsYTwjDKVRWMO7gAE4WSx90DWJmwB4AuzT25VpRFGxtXlvaZwbgDC7h2O4sNg2bTwqp5vcUjS+M1XMa6JJYQou7UZz8wc+bMas9HRETUum2D1Uxfv34dNzc3TE0rQ1AoFLRp04Zr165Vm0wPHjyYqKgoBg8ezOLFi+nSpYu+QhZC1JCp0oR/9f4roCa+4L9JbJfmnliYmBGTm0xWST7XbmcBMPuPlQQ5dyT1dg5Jhem82eV5gl18DBS9EEKIxmLx4sX06NGDJ598EqWybgszjGoCIqDzjEshhH45W9oB4GRhx2TvoWxOPsYANz8UKPgjJ4F1SQcBaGZqycX8a1zMv4YCBQCrE/dKMi2EEEJn+/bt44cffmDt2rWMGjWKyZMn0759+zpp22DJdOvWrUlPT6e8vFxT5nHt2jXatGljqJCEEPVIoVDwkvdQXvIeCkB6cR4A668exkShZP3jH1GBisKyYpws7Pjiwi/sTzvHv+J+Jae0gI+6jZOVP4QQQtTKwIEDGThwIIWFhfz000+MGzcOKysrFixYQM+ePXVq22DJtKurK4GBgaxevZpJkyaxceNGPDw8HlkvLYRoHHq36MxfPPtSWHYb3+ZtsTW3BsDBvHJTpqdb92R/2jnNyLWjhR3nc5OY5D2EPi18DRW2EEIII2ZnZ8dzzz1Hbm4uS5Ys4dKlSzon0/U+AXHq1Kns2LGDjIwMnJycsLW1JTExEYD4+HgmTZrEzZs3sbOzY/ny5XTt2rXOY5AJiEIYH5Vaxej9c8koycNEoaTiPxvA+Nh78F1o9RNJHkYmIDZcMgFRCFGf/UBFRQW//vor33//PSkpKUyYMIEJEybg5uamc9t6W83DkCSZFsI4nciMI6HwBg7mNpzMuogaOJoZw/ehM/G2r/myl5JM60dCQgLh4eHk5ORgb2/PihUr8PWt/tMESaaFENr2A7XpY1q2bEmbNm146aWX6NOnz33n/fz8ah23JNNCCKMRl5fC1GNf0cu1M8+37U2vFp1r9H5JpvXj8ccfZ+LEiUyaNIkNGzawcOFCzpw5U+17JJkWQmjbD9Smj/lzA0GonMNzb/qrUChISkqqddySTAshjIZarWbS4UUk3UpHgYJdT87F2tRS6/dLMl3/aruHgCTTQght+gFd9impLzI1XghhNBQKBe90HckL7frxYcAYzRJ6ouGobg+Be/3vTrVNYFxHCPEIarW6Sr/woI1UtO1j9Mno1pmuifXr17N+/XpDhyGEqEN+jl74OXoZOgyho5kzZ1bZkczExMSA0QghGgKFQmGUnx426pHpF154gV9++cXQYQghRJNx7x4CgOwhIISoUw2xj2nUybQQQgj9uncPAUD2EBBC1KmG2MfIBEQhRJMhExD1ozZ7CMgERCGEtv2AvvYp0ZYk00KIJkOS6YZLkmkhhLH2A1LmIYQQQgghRC1JMi2EEEIIIUQtSTIthBBCCCFELUkyLYQQQgghRC1JMi2EEEIIIUQtNY3VPCwscHFxMXQYWisqKsLGxsbQYdSJxvIsjeU5oPE8S22eIzs7mzt37tRTREIXCoUCpdJ4xnfUajUKhfFvZ99YngMaz7M0lueAmj+LSqXCGNPSJpFMG5vGtHxXY3mWxvIc0HiepbE8hzBOjeXnr7E8BzSeZ2kszwGN61mqYzzDAEIIIYQQQjQwkkwLIYQQQghRSyZz5syZY+ggxP169epl6BDqTGN5lsbyHNB4nqWxPIcwTo3l56+xPAc0nmdpLM8BjetZHkZqpoUQQgghhKglKfMQQgghhBCiliSZFkIIIYQQopYkmW5AZsyYgaenJwqFgnPnzhk6nForLS1lxIgReHt74+/vzxNPPEFiYqKhw6q1IUOG4OfnR0BAAKGhoURFRRk6JJ0sX74chULBli1bDB1KrXl6euLj40NAQAABAQH8/PPPhg5JNBHSTzc80kc3PE2uj1aLBuPQoUPq69evq9u2bauOiooydDi1VlJSot6xY4dapVKp1Wq1+uuvv1b379/fsEHpIC8vT/P9pk2b1H5+fgaMRjdXr15V9+rVSx0SEqLevHmzocOpNWP/HRHGS/rphkf66IbH2H8/akpGphuQfv364eHhYegwdGZpaclTTz2l2fUoJCSE5ORkwwalAwcHB833BQUFRrszlUql4pVXXuHrr7/GwsLC0OEIYZSkn254pI8WhmZq6ABE4/fVV1/x3HPPGToMnUycOJEDBw4AsHPnTgNHUzsRERH06dOHoKAgQ4dSJyZOnIharSY4OJgFCxbg4uJi6JCEMFrG3k9LH93wNKU+WkamRb2aN28eiYmJzJ8/39Ch6OTHH3/k+vXr/P3vf2fWrFmGDqfGYmJi2LhxIx999JGhQ6kThw8f5vz580RGRuLs7Ex4eLihQxLCaDWGflr66IalqfXRMjIt6s2iRYvYtGkTe/fuxdra2tDh1Inw8HBee+01bt68iZOTk6HD0dqRI0dITk6mY8eOAGRkZDBlyhTS09OZNm2agaOruTZt2gBgZmbGW2+9hbe3t4EjEsI4NbZ+WvrohqGp9dEyMi3qRUREBD/99BN79uypUs9mbPLz80lLS9O83rJlC05OTjg6OhowqpqbNm0a6enpJCcnk5ycTEhICN9++61RdtK3b98mPz9f8/qnn36iW7duBoxICOPUGPpp6aMbnqbYR8vIdAMydepUduzYQUZGBkOHDsXW1tYolypKTU3lnXfewcvLi4EDBwJgYWHBqVOnDBxZzRUUFPDCCy9QUlKCUqnExcWF7du3G+0El8YgMzOTkSNHUlFRgVqtxsvLix9//NHQYYkmQvrphkX66IanKfbRsp24EEIIIYQQtSRlHkIIIYQQQtSSJNNCCCGEEELUkiTTQgghhBBC1JIk00IIIYQQQtSSJNNCCCGEEELUkiTTQogGa8aMGXh6eqJQKDh37pxW71m1ahX+/v506dKFQYMGce3atXqOUgghmibpoytJMi3qTUBAAAEBAXTu3BkTExPN69GjR3P27FlGjx5d7zG8++67rFu3rt7vo00ca9euNXQYRicsLIyjR4/Stm1bra6/dOkS7733Hrt27SImJoaXXnrJKDc9EEIIYyB9dCVZZ1rUu+TkZAICAqrsiKQPN27c4IknniA2NlYvC/iXl5djavrgfZCysrLo27cvFy9exMTEpN5jaWw8PT3ZsmULAQEBAJw5c4ZZs2ZRWFhIRUUFH374IS+88AIbNmzg22+/Zffu3QDk5ubi7OxMdna2UW0tLIQQxqSp99EyMi0M4uDBg5pfuuTkZBwcHJg9ezaBgYF07NiRY8eO8fbbbxMQEECXLl2IiYnRvHfVqlX07NmTwMBA+vXrR3R09APv8cMPPzBy5EgUCgWlpaW0bNmS69eva85/+OGHzJo1C4CEhASGDx9Ojx498PPz45tvvtFcN27cOLp3746fnx/Dhw8nIyOjStyzZs0iMDCQb775hm3btuHn56eJe+vWrQC4urrSvn17TQciai8/P58pU6awZs0azp49y549e3jnnXe4ceMG/v7+REZGcvnyZQBWr16NWq0mJSXFwFELIUTT0BT7aEmmRYNQUFBAUFAQkZGRvP/++wwdOpRnn32Wc+fOER4ezqeffgrAsWPH+Omnnzh8+DCRkZHMnTuXsWPHPrDNgwcP0rNnTwAsLS15+eWXWbp0KQB37txh+fLlvP7661RUVPDiiy/y5ZdfcubMGU6ePMm3337LmTNnAFi8eDFnz57l/PnzhIaGMmfOnCpx+/r6EhkZyVtvvcVHH33EsmXLOHfuHOfPn6d///6aa3v16sW+ffvq419fk3L8+HGSkpIYNmwYAQEBDB48GID4+Hg6duzI//t//4+JEyfSvXt3bt68iYODw0M/MRBCCFG3mmIfbdzRi0bD0tKSESNGANC9e3dsbGwYOHAgAMHBwaxZswaArVu3Eh0drUmSofJjopKSEqysrKq0mZqaSosWLTSvX3/9dYKDg/nkk09Yv349wcHBtG3blri4OGJjYxkzZozm2lu3bhEXF0ePHj1Yu3Ytq1atorS0lNLSUpydnTXXmZmZMX78eM3rQYMG8eabbxIWFsaQIUM0o+8ALVu2JC4uri7+dTVparUaX19fjh8//sDzYWFhhIWFAZCRkcHChQvp0KGDPkMUQogmqyn20TIyLRoECwsLzfcmJiZYWlpWeV1eXg5U/pKGh4dz7tw5zVd6evp9iTSAtRvz3a8AAAKeSURBVLU1paWlmtetWrWiX79+/Pzzz/zrX/9i+vTpmjYdHR2rtHn16lXCw8M5evQoS5YsYefOncTExBAREVGlTWtra5TK//4aRUREsHz5cqytrQkPD+eLL77QnCstLX1gnKJmevfuzdWrV9m7d6/m2Llz5ygrKwMgPT0dgIqKCmbNmsUbb7yBtbW1QWIVQoimpin20ZJMC6Py7LPPsnr1as1SOiqVirNnzz7wWj8/P+Lj46sce/PNN/nb3/5Gfn6+5qMnHx8f7OzsWL58uea6xMREcnNzycvLw9bWFicnJ8rKyli2bFm18V26dAlfX1+mT5/OtGnTOHnypObcxYsX8ff3r9VzN1VTp07Fw8OD1NRUhg4dSocOHWjevDk7duxg3rx5+Pv707lzZ95//31UKhUAkydPpnPnznh7e2Nvb8+8efMM/BRCCNE4SR9dSco8hFEJDQ3liy++4Pnnn6e8vJyysjKGDx9O9+7d77s2LCyMH3/8kVdeeUVzLCQkBHt7e6ZOnapZ4cPU1JTt27fz1ltv8c9//pOKigqcnZ1Zu3YtTz75JKtXr8bHxwcnJycGDx7MjRs3Hhrfhx9+SHx8PObm5lhbW2tqtNVqNfv27eP999+v438jjdvD/ngJDAxk//79Dzz322+/1WdIQggh/kP66EqyNJ5otFQqFcHBwWzZsgUPDw+gcrm87t27c/nyZWxtbfUWy65du1i9ejWrV6/W2z2FEEIIUf+kzEM0WkqlkmXLlpGcnAzAxx9/TM+ePVmwYIFeE2moXPXj3vppIYQQQjQOMjIthBBCCCFELcnItBBCCCGEELUkybQQQgghhBC1JMm0EEIIIYQQtSTJtBBCCCGEELUkybQQQgghhBC1JMm0EEIIIYQQtfT/Ad118tgghOh2AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 800x320 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# '''Planetary parameters'''\n",
    "# Mp = 2.0\n",
    "# XFe = 30   # 50: inner core. 30: no inner core\n",
    "# FeM = 0.00 # 0.00\n",
    "# S = 0.0   # percentage of light elements in the core\n",
    "\n",
    "# class Exo(Rocky_Planet):\n",
    "#     def __init__(self, fn):\n",
    "#         self.fn\n",
    "    \n",
    "    \n",
    "#     def parameters(self):\n",
    "#             '''Load all parameter files'''\n",
    "#             Mp, XFe, FeM = function(fn)\n",
    "#             #self.read_parameters(\"M_ {:.1f}_Fe_{:.0f}.0000_FeM_{:2.0f}.0000.yaml\".format(Mp, XFe, FeM))\n",
    "#             self.read_parameters(fn)\n",
    "#             #self.read_parameters(\"Earth.yaml\".format(Mp, XFe, FeM))            \n",
    "#             qcmb_ev = pd.read_csv(\"qc_T_M{:02d}_Fe{:02d}_FeM{:02d}.txt\".format(int(10*Mp),int(XFe)+5, int(FeM)), sep=\" \", skiprows=1, header=None)\n",
    "#             qcmb_ev.columns = [\"time\", \"qcmb\", \"Tcmb\"]\n",
    "#             self.time_vector = qcmb_ev[\"time\"]\n",
    "#             self.qcmb = qcmb_ev[\"qcmb\"]\n",
    "\n",
    "# fnames = glob('input/*.yaml')\n",
    "# if __name__ == '__main__': \n",
    "       \n",
    "#     for i,fn in enumerate(fnames):\n",
    "#         run = Exo(fn)\n",
    "#         Evolution(run).run() \n",
    "#         matrix[i] = Evolution.qc[-1]\n",
    "#         matrix.append({'Mp': run.Mp, \n",
    "#                       ..XFe... \n",
    "#                       'output': Evolution.output})\n",
    "\n",
    "'''Planetary parameters'''\n",
    "Mp = 2.0\n",
    "XFe = 50  #50: inner core. 30: no inner core\n",
    "FeM = 0.0\n",
    "\n",
    "class Exo(Rocky_Planet):\n",
    "    \n",
    "    def parameters(self):\n",
    "        '''Load parameter files'''\n",
    "        os.chdir(\"/Users/irenebonati/Desktop/core/input\")\n",
    "        self.read_parameters(\"M_ {:.1f}_Fe_{:.0f}.0000_FeM_{:2.0f}.0000.yaml\".format(Mp, XFe, FeM))\n",
    "        #self.read_parameters(\"Earth.yaml\".format(Mp, XFe, FeM))\n",
    "        qcmb_ev = pd.read_csv(\"qc_T_M{:02d}_Fe{:02d}_FeM{:02d}.txt\".format(int(10*Mp),int(XFe)+5, int(FeM)), sep=\" \", skiprows=1, header=None)\n",
    "        #qcmb_ev = pd.read_csv(\"qc_T_M{:02d}_Fe{:02d}_FeM{:02d}.txt\".format(int(10*Mp),int(XFe), int(FeM)), sep=\" \", skiprows=1, header=None)\n",
    "        qcmb_ev.columns = [\"time\", \"qcmb\", \"Tcmb\"]\n",
    "        self.time_vector = qcmb_ev[\"time\"]\n",
    "        self.qcmb = qcmb_ev[\"qcmb\"]\n",
    "        \n",
    "if __name__ == '__main__': \n",
    "       \n",
    "    Evolution(Exo()).run()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Inner core size\n",
    "Do planets have an inner core to start with?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
>>>>>>> 5fc3c2ce9bc29e0520cea3a5d9cd3e3a6e61f290
